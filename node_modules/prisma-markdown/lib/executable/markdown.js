#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const generator_helper_1 = require("@prisma/generator-helper");
const MarkdownWriter_1 = require("../writers/MarkdownWriter");
const { version } = require("../../package.json");
(0, generator_helper_1.generatorHandler)({
    onManifest: () => ({
        version,
        defaultOutput: "./ERD.md",
        prettyName: "prisma-markdown",
    }),
    onGenerate: (options) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const content = MarkdownWriter_1.MarkdownWriter.write(options.dmmf.datamodel, options.generator.config);
        const file = (_b = (_a = options.generator.output) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : "./ERD.md";
        try {
            yield fs_1.default.promises.mkdir(path_1.default.dirname(file), { recursive: true });
        }
        catch (_c) { }
        yield fs_1.default.writeFileSync(file, content, "utf8");
    }),
});
//# sourceMappingURL=markdown.js.map