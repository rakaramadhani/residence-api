
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Iuran
 * 
 */
export type Iuran = $Result.DefaultSelection<Prisma.$IuranPayload>
/**
 * Model Broadcast
 * 
 */
export type Broadcast = $Result.DefaultSelection<Prisma.$BroadcastPayload>
/**
 * Model Anggota
 * 
 */
export type Anggota = $Result.DefaultSelection<Prisma.$AnggotaPayload>
/**
 * Model Kendala
 * 
 */
export type Kendala = $Result.DefaultSelection<Prisma.$KendalaPayload>
/**
 * Model Peraturan
 * 
 */
export type Peraturan = $Result.DefaultSelection<Prisma.$PeraturanPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  penghuni: 'penghuni',
  admin: 'admin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const TipeRumah: {
  ChairaTownHouse: 'ChairaTownHouse',
  GrandCeleste: 'GrandCeleste',
  Calosa: 'Calosa'
};

export type TipeRumah = (typeof TipeRumah)[keyof typeof TipeRumah]


export const StatusBayar: {
  verifikasi: 'verifikasi',
  lunas: 'lunas'
};

export type StatusBayar = (typeof StatusBayar)[keyof typeof StatusBayar]


export const StatusBroadcast: {
  uploaded: 'uploaded',
  verifying: 'verifying',
  approved: 'approved'
};

export type StatusBroadcast = (typeof StatusBroadcast)[keyof typeof StatusBroadcast]


export const Gender: {
  Pria: 'Pria',
  Wanita: 'Wanita'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const Kategori: {
  Keamanan: 'Keamanan',
  Infrastruktur: 'Infrastruktur',
  Kebersihan: 'Kebersihan',
  Pelayanan: 'Pelayanan',
  Lainnya: 'Lainnya'
};

export type Kategori = (typeof Kategori)[keyof typeof Kategori]


export const StatusKendala: {
  PengajuanBaru: 'PengajuanBaru',
  Ditangani: 'Ditangani',
  Selesai: 'Selesai'
};

export type StatusKendala = (typeof StatusKendala)[keyof typeof StatusKendala]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type TipeRumah = $Enums.TipeRumah

export const TipeRumah: typeof $Enums.TipeRumah

export type StatusBayar = $Enums.StatusBayar

export const StatusBayar: typeof $Enums.StatusBayar

export type StatusBroadcast = $Enums.StatusBroadcast

export const StatusBroadcast: typeof $Enums.StatusBroadcast

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type Kategori = $Enums.Kategori

export const Kategori: typeof $Enums.Kategori

export type StatusKendala = $Enums.StatusKendala

export const StatusKendala: typeof $Enums.StatusKendala

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.iuran`: Exposes CRUD operations for the **Iuran** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Iurans
    * const iurans = await prisma.iuran.findMany()
    * ```
    */
  get iuran(): Prisma.IuranDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.broadcast`: Exposes CRUD operations for the **Broadcast** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Broadcasts
    * const broadcasts = await prisma.broadcast.findMany()
    * ```
    */
  get broadcast(): Prisma.BroadcastDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.anggota`: Exposes CRUD operations for the **Anggota** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Anggotas
    * const anggotas = await prisma.anggota.findMany()
    * ```
    */
  get anggota(): Prisma.AnggotaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.kendala`: Exposes CRUD operations for the **Kendala** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kendalas
    * const kendalas = await prisma.kendala.findMany()
    * ```
    */
  get kendala(): Prisma.KendalaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.peraturan`: Exposes CRUD operations for the **Peraturan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Peraturans
    * const peraturans = await prisma.peraturan.findMany()
    * ```
    */
  get peraturan(): Prisma.PeraturanDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Iuran: 'Iuran',
    Broadcast: 'Broadcast',
    Anggota: 'Anggota',
    Kendala: 'Kendala',
    Peraturan: 'Peraturan'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "iuran" | "broadcast" | "anggota" | "kendala" | "peraturan"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Iuran: {
        payload: Prisma.$IuranPayload<ExtArgs>
        fields: Prisma.IuranFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IuranFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IuranPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IuranFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IuranPayload>
          }
          findFirst: {
            args: Prisma.IuranFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IuranPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IuranFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IuranPayload>
          }
          findMany: {
            args: Prisma.IuranFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IuranPayload>[]
          }
          create: {
            args: Prisma.IuranCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IuranPayload>
          }
          createMany: {
            args: Prisma.IuranCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IuranCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IuranPayload>[]
          }
          delete: {
            args: Prisma.IuranDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IuranPayload>
          }
          update: {
            args: Prisma.IuranUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IuranPayload>
          }
          deleteMany: {
            args: Prisma.IuranDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IuranUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IuranUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IuranPayload>[]
          }
          upsert: {
            args: Prisma.IuranUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IuranPayload>
          }
          aggregate: {
            args: Prisma.IuranAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIuran>
          }
          groupBy: {
            args: Prisma.IuranGroupByArgs<ExtArgs>
            result: $Utils.Optional<IuranGroupByOutputType>[]
          }
          count: {
            args: Prisma.IuranCountArgs<ExtArgs>
            result: $Utils.Optional<IuranCountAggregateOutputType> | number
          }
        }
      }
      Broadcast: {
        payload: Prisma.$BroadcastPayload<ExtArgs>
        fields: Prisma.BroadcastFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BroadcastFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BroadcastFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastPayload>
          }
          findFirst: {
            args: Prisma.BroadcastFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BroadcastFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastPayload>
          }
          findMany: {
            args: Prisma.BroadcastFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastPayload>[]
          }
          create: {
            args: Prisma.BroadcastCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastPayload>
          }
          createMany: {
            args: Prisma.BroadcastCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BroadcastCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastPayload>[]
          }
          delete: {
            args: Prisma.BroadcastDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastPayload>
          }
          update: {
            args: Prisma.BroadcastUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastPayload>
          }
          deleteMany: {
            args: Prisma.BroadcastDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BroadcastUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BroadcastUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastPayload>[]
          }
          upsert: {
            args: Prisma.BroadcastUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BroadcastPayload>
          }
          aggregate: {
            args: Prisma.BroadcastAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBroadcast>
          }
          groupBy: {
            args: Prisma.BroadcastGroupByArgs<ExtArgs>
            result: $Utils.Optional<BroadcastGroupByOutputType>[]
          }
          count: {
            args: Prisma.BroadcastCountArgs<ExtArgs>
            result: $Utils.Optional<BroadcastCountAggregateOutputType> | number
          }
        }
      }
      Anggota: {
        payload: Prisma.$AnggotaPayload<ExtArgs>
        fields: Prisma.AnggotaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnggotaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnggotaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnggotaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnggotaPayload>
          }
          findFirst: {
            args: Prisma.AnggotaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnggotaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnggotaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnggotaPayload>
          }
          findMany: {
            args: Prisma.AnggotaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnggotaPayload>[]
          }
          create: {
            args: Prisma.AnggotaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnggotaPayload>
          }
          createMany: {
            args: Prisma.AnggotaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnggotaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnggotaPayload>[]
          }
          delete: {
            args: Prisma.AnggotaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnggotaPayload>
          }
          update: {
            args: Prisma.AnggotaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnggotaPayload>
          }
          deleteMany: {
            args: Prisma.AnggotaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnggotaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnggotaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnggotaPayload>[]
          }
          upsert: {
            args: Prisma.AnggotaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnggotaPayload>
          }
          aggregate: {
            args: Prisma.AnggotaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnggota>
          }
          groupBy: {
            args: Prisma.AnggotaGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnggotaGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnggotaCountArgs<ExtArgs>
            result: $Utils.Optional<AnggotaCountAggregateOutputType> | number
          }
        }
      }
      Kendala: {
        payload: Prisma.$KendalaPayload<ExtArgs>
        fields: Prisma.KendalaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KendalaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KendalaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KendalaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KendalaPayload>
          }
          findFirst: {
            args: Prisma.KendalaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KendalaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KendalaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KendalaPayload>
          }
          findMany: {
            args: Prisma.KendalaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KendalaPayload>[]
          }
          create: {
            args: Prisma.KendalaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KendalaPayload>
          }
          createMany: {
            args: Prisma.KendalaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KendalaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KendalaPayload>[]
          }
          delete: {
            args: Prisma.KendalaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KendalaPayload>
          }
          update: {
            args: Prisma.KendalaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KendalaPayload>
          }
          deleteMany: {
            args: Prisma.KendalaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KendalaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KendalaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KendalaPayload>[]
          }
          upsert: {
            args: Prisma.KendalaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KendalaPayload>
          }
          aggregate: {
            args: Prisma.KendalaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKendala>
          }
          groupBy: {
            args: Prisma.KendalaGroupByArgs<ExtArgs>
            result: $Utils.Optional<KendalaGroupByOutputType>[]
          }
          count: {
            args: Prisma.KendalaCountArgs<ExtArgs>
            result: $Utils.Optional<KendalaCountAggregateOutputType> | number
          }
        }
      }
      Peraturan: {
        payload: Prisma.$PeraturanPayload<ExtArgs>
        fields: Prisma.PeraturanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PeraturanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PeraturanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PeraturanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PeraturanPayload>
          }
          findFirst: {
            args: Prisma.PeraturanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PeraturanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PeraturanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PeraturanPayload>
          }
          findMany: {
            args: Prisma.PeraturanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PeraturanPayload>[]
          }
          create: {
            args: Prisma.PeraturanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PeraturanPayload>
          }
          createMany: {
            args: Prisma.PeraturanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PeraturanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PeraturanPayload>[]
          }
          delete: {
            args: Prisma.PeraturanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PeraturanPayload>
          }
          update: {
            args: Prisma.PeraturanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PeraturanPayload>
          }
          deleteMany: {
            args: Prisma.PeraturanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PeraturanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PeraturanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PeraturanPayload>[]
          }
          upsert: {
            args: Prisma.PeraturanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PeraturanPayload>
          }
          aggregate: {
            args: Prisma.PeraturanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePeraturan>
          }
          groupBy: {
            args: Prisma.PeraturanGroupByArgs<ExtArgs>
            result: $Utils.Optional<PeraturanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PeraturanCountArgs<ExtArgs>
            result: $Utils.Optional<PeraturanCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    iuran?: IuranOmit
    broadcast?: BroadcastOmit
    anggota?: AnggotaOmit
    kendala?: KendalaOmit
    peraturan?: PeraturanOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    iuran: number
    broadcast: number
    anggota: number
    kendala: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    iuran?: boolean | UserCountOutputTypeCountIuranArgs
    broadcast?: boolean | UserCountOutputTypeCountBroadcastArgs
    anggota?: boolean | UserCountOutputTypeCountAnggotaArgs
    kendala?: boolean | UserCountOutputTypeCountKendalaArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountIuranArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IuranWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBroadcastArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BroadcastWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnggotaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnggotaWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountKendalaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KendalaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    username: string | null
    password: string | null
    role: $Enums.Role | null
    blok_rumah: string | null
    tipe_rumah: $Enums.TipeRumah | null
    isVerified: boolean | null
    feedback: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    username: string | null
    password: string | null
    role: $Enums.Role | null
    blok_rumah: string | null
    tipe_rumah: $Enums.TipeRumah | null
    isVerified: boolean | null
    feedback: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    email: number
    username: number
    password: number
    role: number
    blok_rumah: number
    tipe_rumah: number
    isVerified: number
    feedback: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    username?: true
    password?: true
    role?: true
    blok_rumah?: true
    tipe_rumah?: true
    isVerified?: true
    feedback?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    username?: true
    password?: true
    role?: true
    blok_rumah?: true
    tipe_rumah?: true
    isVerified?: true
    feedback?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    username?: true
    password?: true
    role?: true
    blok_rumah?: true
    tipe_rumah?: true
    isVerified?: true
    feedback?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    email: string
    username: string | null
    password: string
    role: $Enums.Role
    blok_rumah: string
    tipe_rumah: $Enums.TipeRumah
    isVerified: boolean
    feedback: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    blok_rumah?: boolean
    tipe_rumah?: boolean
    isVerified?: boolean
    feedback?: boolean
    iuran?: boolean | User$iuranArgs<ExtArgs>
    broadcast?: boolean | User$broadcastArgs<ExtArgs>
    anggota?: boolean | User$anggotaArgs<ExtArgs>
    kendala?: boolean | User$kendalaArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    blok_rumah?: boolean
    tipe_rumah?: boolean
    isVerified?: boolean
    feedback?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    blok_rumah?: boolean
    tipe_rumah?: boolean
    isVerified?: boolean
    feedback?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    blok_rumah?: boolean
    tipe_rumah?: boolean
    isVerified?: boolean
    feedback?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "email" | "username" | "password" | "role" | "blok_rumah" | "tipe_rumah" | "isVerified" | "feedback", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    iuran?: boolean | User$iuranArgs<ExtArgs>
    broadcast?: boolean | User$broadcastArgs<ExtArgs>
    anggota?: boolean | User$anggotaArgs<ExtArgs>
    kendala?: boolean | User$kendalaArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      iuran: Prisma.$IuranPayload<ExtArgs>[]
      broadcast: Prisma.$BroadcastPayload<ExtArgs>[]
      anggota: Prisma.$AnggotaPayload<ExtArgs>[]
      kendala: Prisma.$KendalaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      email: string
      username: string | null
      password: string
      role: $Enums.Role
      blok_rumah: string
      tipe_rumah: $Enums.TipeRumah
      isVerified: boolean
      feedback: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    iuran<T extends User$iuranArgs<ExtArgs> = {}>(args?: Subset<T, User$iuranArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IuranPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    broadcast<T extends User$broadcastArgs<ExtArgs> = {}>(args?: Subset<T, User$broadcastArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BroadcastPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    anggota<T extends User$anggotaArgs<ExtArgs> = {}>(args?: Subset<T, User$anggotaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnggotaPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    kendala<T extends User$kendalaArgs<ExtArgs> = {}>(args?: Subset<T, User$kendalaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KendalaPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly blok_rumah: FieldRef<"User", 'String'>
    readonly tipe_rumah: FieldRef<"User", 'TipeRumah'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly feedback: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.iuran
   */
  export type User$iuranArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranInclude<ExtArgs> | null
    where?: IuranWhereInput
    orderBy?: IuranOrderByWithRelationInput | IuranOrderByWithRelationInput[]
    cursor?: IuranWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IuranScalarFieldEnum | IuranScalarFieldEnum[]
  }

  /**
   * User.broadcast
   */
  export type User$broadcastArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastInclude<ExtArgs> | null
    where?: BroadcastWhereInput
    orderBy?: BroadcastOrderByWithRelationInput | BroadcastOrderByWithRelationInput[]
    cursor?: BroadcastWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BroadcastScalarFieldEnum | BroadcastScalarFieldEnum[]
  }

  /**
   * User.anggota
   */
  export type User$anggotaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaInclude<ExtArgs> | null
    where?: AnggotaWhereInput
    orderBy?: AnggotaOrderByWithRelationInput | AnggotaOrderByWithRelationInput[]
    cursor?: AnggotaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnggotaScalarFieldEnum | AnggotaScalarFieldEnum[]
  }

  /**
   * User.kendala
   */
  export type User$kendalaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaInclude<ExtArgs> | null
    where?: KendalaWhereInput
    orderBy?: KendalaOrderByWithRelationInput | KendalaOrderByWithRelationInput[]
    cursor?: KendalaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KendalaScalarFieldEnum | KendalaScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Iuran
   */

  export type AggregateIuran = {
    _count: IuranCountAggregateOutputType | null
    _avg: IuranAvgAggregateOutputType | null
    _sum: IuranSumAggregateOutputType | null
    _min: IuranMinAggregateOutputType | null
    _max: IuranMaxAggregateOutputType | null
  }

  export type IuranAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type IuranSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type IuranMinAggregateOutputType = {
    id: number | null
    userId: number | null
    tanggal_iuran: Date | null
    tanggal_jatuh_tempo: Date | null
    createdAt: Date | null
    bukti_bayar: string | null
    status_bayar: $Enums.StatusBayar | null
    feedback: string | null
  }

  export type IuranMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    tanggal_iuran: Date | null
    tanggal_jatuh_tempo: Date | null
    createdAt: Date | null
    bukti_bayar: string | null
    status_bayar: $Enums.StatusBayar | null
    feedback: string | null
  }

  export type IuranCountAggregateOutputType = {
    id: number
    userId: number
    tanggal_iuran: number
    tanggal_jatuh_tempo: number
    createdAt: number
    bukti_bayar: number
    status_bayar: number
    feedback: number
    _all: number
  }


  export type IuranAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type IuranSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type IuranMinAggregateInputType = {
    id?: true
    userId?: true
    tanggal_iuran?: true
    tanggal_jatuh_tempo?: true
    createdAt?: true
    bukti_bayar?: true
    status_bayar?: true
    feedback?: true
  }

  export type IuranMaxAggregateInputType = {
    id?: true
    userId?: true
    tanggal_iuran?: true
    tanggal_jatuh_tempo?: true
    createdAt?: true
    bukti_bayar?: true
    status_bayar?: true
    feedback?: true
  }

  export type IuranCountAggregateInputType = {
    id?: true
    userId?: true
    tanggal_iuran?: true
    tanggal_jatuh_tempo?: true
    createdAt?: true
    bukti_bayar?: true
    status_bayar?: true
    feedback?: true
    _all?: true
  }

  export type IuranAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Iuran to aggregate.
     */
    where?: IuranWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Iurans to fetch.
     */
    orderBy?: IuranOrderByWithRelationInput | IuranOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IuranWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Iurans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Iurans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Iurans
    **/
    _count?: true | IuranCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IuranAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IuranSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IuranMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IuranMaxAggregateInputType
  }

  export type GetIuranAggregateType<T extends IuranAggregateArgs> = {
        [P in keyof T & keyof AggregateIuran]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIuran[P]>
      : GetScalarType<T[P], AggregateIuran[P]>
  }




  export type IuranGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IuranWhereInput
    orderBy?: IuranOrderByWithAggregationInput | IuranOrderByWithAggregationInput[]
    by: IuranScalarFieldEnum[] | IuranScalarFieldEnum
    having?: IuranScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IuranCountAggregateInputType | true
    _avg?: IuranAvgAggregateInputType
    _sum?: IuranSumAggregateInputType
    _min?: IuranMinAggregateInputType
    _max?: IuranMaxAggregateInputType
  }

  export type IuranGroupByOutputType = {
    id: number
    userId: number
    tanggal_iuran: Date
    tanggal_jatuh_tempo: Date
    createdAt: Date
    bukti_bayar: string
    status_bayar: $Enums.StatusBayar
    feedback: string
    _count: IuranCountAggregateOutputType | null
    _avg: IuranAvgAggregateOutputType | null
    _sum: IuranSumAggregateOutputType | null
    _min: IuranMinAggregateOutputType | null
    _max: IuranMaxAggregateOutputType | null
  }

  type GetIuranGroupByPayload<T extends IuranGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IuranGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IuranGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IuranGroupByOutputType[P]>
            : GetScalarType<T[P], IuranGroupByOutputType[P]>
        }
      >
    >


  export type IuranSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tanggal_iuran?: boolean
    tanggal_jatuh_tempo?: boolean
    createdAt?: boolean
    bukti_bayar?: boolean
    status_bayar?: boolean
    feedback?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["iuran"]>

  export type IuranSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tanggal_iuran?: boolean
    tanggal_jatuh_tempo?: boolean
    createdAt?: boolean
    bukti_bayar?: boolean
    status_bayar?: boolean
    feedback?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["iuran"]>

  export type IuranSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tanggal_iuran?: boolean
    tanggal_jatuh_tempo?: boolean
    createdAt?: boolean
    bukti_bayar?: boolean
    status_bayar?: boolean
    feedback?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["iuran"]>

  export type IuranSelectScalar = {
    id?: boolean
    userId?: boolean
    tanggal_iuran?: boolean
    tanggal_jatuh_tempo?: boolean
    createdAt?: boolean
    bukti_bayar?: boolean
    status_bayar?: boolean
    feedback?: boolean
  }

  export type IuranOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "tanggal_iuran" | "tanggal_jatuh_tempo" | "createdAt" | "bukti_bayar" | "status_bayar" | "feedback", ExtArgs["result"]["iuran"]>
  export type IuranInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type IuranIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type IuranIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $IuranPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Iuran"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      tanggal_iuran: Date
      tanggal_jatuh_tempo: Date
      createdAt: Date
      bukti_bayar: string
      status_bayar: $Enums.StatusBayar
      feedback: string
    }, ExtArgs["result"]["iuran"]>
    composites: {}
  }

  type IuranGetPayload<S extends boolean | null | undefined | IuranDefaultArgs> = $Result.GetResult<Prisma.$IuranPayload, S>

  type IuranCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IuranFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IuranCountAggregateInputType | true
    }

  export interface IuranDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Iuran'], meta: { name: 'Iuran' } }
    /**
     * Find zero or one Iuran that matches the filter.
     * @param {IuranFindUniqueArgs} args - Arguments to find a Iuran
     * @example
     * // Get one Iuran
     * const iuran = await prisma.iuran.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IuranFindUniqueArgs>(args: SelectSubset<T, IuranFindUniqueArgs<ExtArgs>>): Prisma__IuranClient<$Result.GetResult<Prisma.$IuranPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Iuran that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IuranFindUniqueOrThrowArgs} args - Arguments to find a Iuran
     * @example
     * // Get one Iuran
     * const iuran = await prisma.iuran.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IuranFindUniqueOrThrowArgs>(args: SelectSubset<T, IuranFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IuranClient<$Result.GetResult<Prisma.$IuranPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Iuran that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IuranFindFirstArgs} args - Arguments to find a Iuran
     * @example
     * // Get one Iuran
     * const iuran = await prisma.iuran.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IuranFindFirstArgs>(args?: SelectSubset<T, IuranFindFirstArgs<ExtArgs>>): Prisma__IuranClient<$Result.GetResult<Prisma.$IuranPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Iuran that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IuranFindFirstOrThrowArgs} args - Arguments to find a Iuran
     * @example
     * // Get one Iuran
     * const iuran = await prisma.iuran.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IuranFindFirstOrThrowArgs>(args?: SelectSubset<T, IuranFindFirstOrThrowArgs<ExtArgs>>): Prisma__IuranClient<$Result.GetResult<Prisma.$IuranPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Iurans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IuranFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Iurans
     * const iurans = await prisma.iuran.findMany()
     * 
     * // Get first 10 Iurans
     * const iurans = await prisma.iuran.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const iuranWithIdOnly = await prisma.iuran.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IuranFindManyArgs>(args?: SelectSubset<T, IuranFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IuranPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Iuran.
     * @param {IuranCreateArgs} args - Arguments to create a Iuran.
     * @example
     * // Create one Iuran
     * const Iuran = await prisma.iuran.create({
     *   data: {
     *     // ... data to create a Iuran
     *   }
     * })
     * 
     */
    create<T extends IuranCreateArgs>(args: SelectSubset<T, IuranCreateArgs<ExtArgs>>): Prisma__IuranClient<$Result.GetResult<Prisma.$IuranPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Iurans.
     * @param {IuranCreateManyArgs} args - Arguments to create many Iurans.
     * @example
     * // Create many Iurans
     * const iuran = await prisma.iuran.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IuranCreateManyArgs>(args?: SelectSubset<T, IuranCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Iurans and returns the data saved in the database.
     * @param {IuranCreateManyAndReturnArgs} args - Arguments to create many Iurans.
     * @example
     * // Create many Iurans
     * const iuran = await prisma.iuran.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Iurans and only return the `id`
     * const iuranWithIdOnly = await prisma.iuran.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IuranCreateManyAndReturnArgs>(args?: SelectSubset<T, IuranCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IuranPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Iuran.
     * @param {IuranDeleteArgs} args - Arguments to delete one Iuran.
     * @example
     * // Delete one Iuran
     * const Iuran = await prisma.iuran.delete({
     *   where: {
     *     // ... filter to delete one Iuran
     *   }
     * })
     * 
     */
    delete<T extends IuranDeleteArgs>(args: SelectSubset<T, IuranDeleteArgs<ExtArgs>>): Prisma__IuranClient<$Result.GetResult<Prisma.$IuranPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Iuran.
     * @param {IuranUpdateArgs} args - Arguments to update one Iuran.
     * @example
     * // Update one Iuran
     * const iuran = await prisma.iuran.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IuranUpdateArgs>(args: SelectSubset<T, IuranUpdateArgs<ExtArgs>>): Prisma__IuranClient<$Result.GetResult<Prisma.$IuranPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Iurans.
     * @param {IuranDeleteManyArgs} args - Arguments to filter Iurans to delete.
     * @example
     * // Delete a few Iurans
     * const { count } = await prisma.iuran.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IuranDeleteManyArgs>(args?: SelectSubset<T, IuranDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Iurans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IuranUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Iurans
     * const iuran = await prisma.iuran.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IuranUpdateManyArgs>(args: SelectSubset<T, IuranUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Iurans and returns the data updated in the database.
     * @param {IuranUpdateManyAndReturnArgs} args - Arguments to update many Iurans.
     * @example
     * // Update many Iurans
     * const iuran = await prisma.iuran.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Iurans and only return the `id`
     * const iuranWithIdOnly = await prisma.iuran.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IuranUpdateManyAndReturnArgs>(args: SelectSubset<T, IuranUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IuranPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Iuran.
     * @param {IuranUpsertArgs} args - Arguments to update or create a Iuran.
     * @example
     * // Update or create a Iuran
     * const iuran = await prisma.iuran.upsert({
     *   create: {
     *     // ... data to create a Iuran
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Iuran we want to update
     *   }
     * })
     */
    upsert<T extends IuranUpsertArgs>(args: SelectSubset<T, IuranUpsertArgs<ExtArgs>>): Prisma__IuranClient<$Result.GetResult<Prisma.$IuranPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Iurans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IuranCountArgs} args - Arguments to filter Iurans to count.
     * @example
     * // Count the number of Iurans
     * const count = await prisma.iuran.count({
     *   where: {
     *     // ... the filter for the Iurans we want to count
     *   }
     * })
    **/
    count<T extends IuranCountArgs>(
      args?: Subset<T, IuranCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IuranCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Iuran.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IuranAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IuranAggregateArgs>(args: Subset<T, IuranAggregateArgs>): Prisma.PrismaPromise<GetIuranAggregateType<T>>

    /**
     * Group by Iuran.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IuranGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IuranGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IuranGroupByArgs['orderBy'] }
        : { orderBy?: IuranGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IuranGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIuranGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Iuran model
   */
  readonly fields: IuranFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Iuran.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IuranClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Iuran model
   */ 
  interface IuranFieldRefs {
    readonly id: FieldRef<"Iuran", 'Int'>
    readonly userId: FieldRef<"Iuran", 'Int'>
    readonly tanggal_iuran: FieldRef<"Iuran", 'DateTime'>
    readonly tanggal_jatuh_tempo: FieldRef<"Iuran", 'DateTime'>
    readonly createdAt: FieldRef<"Iuran", 'DateTime'>
    readonly bukti_bayar: FieldRef<"Iuran", 'String'>
    readonly status_bayar: FieldRef<"Iuran", 'StatusBayar'>
    readonly feedback: FieldRef<"Iuran", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Iuran findUnique
   */
  export type IuranFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranInclude<ExtArgs> | null
    /**
     * Filter, which Iuran to fetch.
     */
    where: IuranWhereUniqueInput
  }

  /**
   * Iuran findUniqueOrThrow
   */
  export type IuranFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranInclude<ExtArgs> | null
    /**
     * Filter, which Iuran to fetch.
     */
    where: IuranWhereUniqueInput
  }

  /**
   * Iuran findFirst
   */
  export type IuranFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranInclude<ExtArgs> | null
    /**
     * Filter, which Iuran to fetch.
     */
    where?: IuranWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Iurans to fetch.
     */
    orderBy?: IuranOrderByWithRelationInput | IuranOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Iurans.
     */
    cursor?: IuranWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Iurans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Iurans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Iurans.
     */
    distinct?: IuranScalarFieldEnum | IuranScalarFieldEnum[]
  }

  /**
   * Iuran findFirstOrThrow
   */
  export type IuranFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranInclude<ExtArgs> | null
    /**
     * Filter, which Iuran to fetch.
     */
    where?: IuranWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Iurans to fetch.
     */
    orderBy?: IuranOrderByWithRelationInput | IuranOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Iurans.
     */
    cursor?: IuranWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Iurans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Iurans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Iurans.
     */
    distinct?: IuranScalarFieldEnum | IuranScalarFieldEnum[]
  }

  /**
   * Iuran findMany
   */
  export type IuranFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranInclude<ExtArgs> | null
    /**
     * Filter, which Iurans to fetch.
     */
    where?: IuranWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Iurans to fetch.
     */
    orderBy?: IuranOrderByWithRelationInput | IuranOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Iurans.
     */
    cursor?: IuranWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Iurans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Iurans.
     */
    skip?: number
    distinct?: IuranScalarFieldEnum | IuranScalarFieldEnum[]
  }

  /**
   * Iuran create
   */
  export type IuranCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranInclude<ExtArgs> | null
    /**
     * The data needed to create a Iuran.
     */
    data: XOR<IuranCreateInput, IuranUncheckedCreateInput>
  }

  /**
   * Iuran createMany
   */
  export type IuranCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Iurans.
     */
    data: IuranCreateManyInput | IuranCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Iuran createManyAndReturn
   */
  export type IuranCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * The data used to create many Iurans.
     */
    data: IuranCreateManyInput | IuranCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Iuran update
   */
  export type IuranUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranInclude<ExtArgs> | null
    /**
     * The data needed to update a Iuran.
     */
    data: XOR<IuranUpdateInput, IuranUncheckedUpdateInput>
    /**
     * Choose, which Iuran to update.
     */
    where: IuranWhereUniqueInput
  }

  /**
   * Iuran updateMany
   */
  export type IuranUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Iurans.
     */
    data: XOR<IuranUpdateManyMutationInput, IuranUncheckedUpdateManyInput>
    /**
     * Filter which Iurans to update
     */
    where?: IuranWhereInput
    /**
     * Limit how many Iurans to update.
     */
    limit?: number
  }

  /**
   * Iuran updateManyAndReturn
   */
  export type IuranUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * The data used to update Iurans.
     */
    data: XOR<IuranUpdateManyMutationInput, IuranUncheckedUpdateManyInput>
    /**
     * Filter which Iurans to update
     */
    where?: IuranWhereInput
    /**
     * Limit how many Iurans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Iuran upsert
   */
  export type IuranUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranInclude<ExtArgs> | null
    /**
     * The filter to search for the Iuran to update in case it exists.
     */
    where: IuranWhereUniqueInput
    /**
     * In case the Iuran found by the `where` argument doesn't exist, create a new Iuran with this data.
     */
    create: XOR<IuranCreateInput, IuranUncheckedCreateInput>
    /**
     * In case the Iuran was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IuranUpdateInput, IuranUncheckedUpdateInput>
  }

  /**
   * Iuran delete
   */
  export type IuranDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranInclude<ExtArgs> | null
    /**
     * Filter which Iuran to delete.
     */
    where: IuranWhereUniqueInput
  }

  /**
   * Iuran deleteMany
   */
  export type IuranDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Iurans to delete
     */
    where?: IuranWhereInput
    /**
     * Limit how many Iurans to delete.
     */
    limit?: number
  }

  /**
   * Iuran without action
   */
  export type IuranDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Iuran
     */
    select?: IuranSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Iuran
     */
    omit?: IuranOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IuranInclude<ExtArgs> | null
  }


  /**
   * Model Broadcast
   */

  export type AggregateBroadcast = {
    _count: BroadcastCountAggregateOutputType | null
    _avg: BroadcastAvgAggregateOutputType | null
    _sum: BroadcastSumAggregateOutputType | null
    _min: BroadcastMinAggregateOutputType | null
    _max: BroadcastMaxAggregateOutputType | null
  }

  export type BroadcastAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type BroadcastSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type BroadcastMinAggregateOutputType = {
    id: number | null
    userId: number | null
    broadcast: string | null
    tanggal_acara: Date | null
    status_broadcast: $Enums.StatusBroadcast | null
    feedback: string | null
    createdAt: Date | null
  }

  export type BroadcastMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    broadcast: string | null
    tanggal_acara: Date | null
    status_broadcast: $Enums.StatusBroadcast | null
    feedback: string | null
    createdAt: Date | null
  }

  export type BroadcastCountAggregateOutputType = {
    id: number
    userId: number
    broadcast: number
    tanggal_acara: number
    status_broadcast: number
    feedback: number
    createdAt: number
    _all: number
  }


  export type BroadcastAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type BroadcastSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type BroadcastMinAggregateInputType = {
    id?: true
    userId?: true
    broadcast?: true
    tanggal_acara?: true
    status_broadcast?: true
    feedback?: true
    createdAt?: true
  }

  export type BroadcastMaxAggregateInputType = {
    id?: true
    userId?: true
    broadcast?: true
    tanggal_acara?: true
    status_broadcast?: true
    feedback?: true
    createdAt?: true
  }

  export type BroadcastCountAggregateInputType = {
    id?: true
    userId?: true
    broadcast?: true
    tanggal_acara?: true
    status_broadcast?: true
    feedback?: true
    createdAt?: true
    _all?: true
  }

  export type BroadcastAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Broadcast to aggregate.
     */
    where?: BroadcastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Broadcasts to fetch.
     */
    orderBy?: BroadcastOrderByWithRelationInput | BroadcastOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BroadcastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Broadcasts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Broadcasts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Broadcasts
    **/
    _count?: true | BroadcastCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BroadcastAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BroadcastSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BroadcastMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BroadcastMaxAggregateInputType
  }

  export type GetBroadcastAggregateType<T extends BroadcastAggregateArgs> = {
        [P in keyof T & keyof AggregateBroadcast]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBroadcast[P]>
      : GetScalarType<T[P], AggregateBroadcast[P]>
  }




  export type BroadcastGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BroadcastWhereInput
    orderBy?: BroadcastOrderByWithAggregationInput | BroadcastOrderByWithAggregationInput[]
    by: BroadcastScalarFieldEnum[] | BroadcastScalarFieldEnum
    having?: BroadcastScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BroadcastCountAggregateInputType | true
    _avg?: BroadcastAvgAggregateInputType
    _sum?: BroadcastSumAggregateInputType
    _min?: BroadcastMinAggregateInputType
    _max?: BroadcastMaxAggregateInputType
  }

  export type BroadcastGroupByOutputType = {
    id: number
    userId: number
    broadcast: string
    tanggal_acara: Date
    status_broadcast: $Enums.StatusBroadcast
    feedback: string
    createdAt: Date
    _count: BroadcastCountAggregateOutputType | null
    _avg: BroadcastAvgAggregateOutputType | null
    _sum: BroadcastSumAggregateOutputType | null
    _min: BroadcastMinAggregateOutputType | null
    _max: BroadcastMaxAggregateOutputType | null
  }

  type GetBroadcastGroupByPayload<T extends BroadcastGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BroadcastGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BroadcastGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BroadcastGroupByOutputType[P]>
            : GetScalarType<T[P], BroadcastGroupByOutputType[P]>
        }
      >
    >


  export type BroadcastSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    broadcast?: boolean
    tanggal_acara?: boolean
    status_broadcast?: boolean
    feedback?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["broadcast"]>

  export type BroadcastSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    broadcast?: boolean
    tanggal_acara?: boolean
    status_broadcast?: boolean
    feedback?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["broadcast"]>

  export type BroadcastSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    broadcast?: boolean
    tanggal_acara?: boolean
    status_broadcast?: boolean
    feedback?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["broadcast"]>

  export type BroadcastSelectScalar = {
    id?: boolean
    userId?: boolean
    broadcast?: boolean
    tanggal_acara?: boolean
    status_broadcast?: boolean
    feedback?: boolean
    createdAt?: boolean
  }

  export type BroadcastOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "broadcast" | "tanggal_acara" | "status_broadcast" | "feedback" | "createdAt", ExtArgs["result"]["broadcast"]>
  export type BroadcastInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BroadcastIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BroadcastIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BroadcastPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Broadcast"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      broadcast: string
      tanggal_acara: Date
      status_broadcast: $Enums.StatusBroadcast
      feedback: string
      createdAt: Date
    }, ExtArgs["result"]["broadcast"]>
    composites: {}
  }

  type BroadcastGetPayload<S extends boolean | null | undefined | BroadcastDefaultArgs> = $Result.GetResult<Prisma.$BroadcastPayload, S>

  type BroadcastCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BroadcastFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BroadcastCountAggregateInputType | true
    }

  export interface BroadcastDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Broadcast'], meta: { name: 'Broadcast' } }
    /**
     * Find zero or one Broadcast that matches the filter.
     * @param {BroadcastFindUniqueArgs} args - Arguments to find a Broadcast
     * @example
     * // Get one Broadcast
     * const broadcast = await prisma.broadcast.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BroadcastFindUniqueArgs>(args: SelectSubset<T, BroadcastFindUniqueArgs<ExtArgs>>): Prisma__BroadcastClient<$Result.GetResult<Prisma.$BroadcastPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Broadcast that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BroadcastFindUniqueOrThrowArgs} args - Arguments to find a Broadcast
     * @example
     * // Get one Broadcast
     * const broadcast = await prisma.broadcast.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BroadcastFindUniqueOrThrowArgs>(args: SelectSubset<T, BroadcastFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BroadcastClient<$Result.GetResult<Prisma.$BroadcastPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Broadcast that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastFindFirstArgs} args - Arguments to find a Broadcast
     * @example
     * // Get one Broadcast
     * const broadcast = await prisma.broadcast.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BroadcastFindFirstArgs>(args?: SelectSubset<T, BroadcastFindFirstArgs<ExtArgs>>): Prisma__BroadcastClient<$Result.GetResult<Prisma.$BroadcastPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Broadcast that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastFindFirstOrThrowArgs} args - Arguments to find a Broadcast
     * @example
     * // Get one Broadcast
     * const broadcast = await prisma.broadcast.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BroadcastFindFirstOrThrowArgs>(args?: SelectSubset<T, BroadcastFindFirstOrThrowArgs<ExtArgs>>): Prisma__BroadcastClient<$Result.GetResult<Prisma.$BroadcastPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Broadcasts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Broadcasts
     * const broadcasts = await prisma.broadcast.findMany()
     * 
     * // Get first 10 Broadcasts
     * const broadcasts = await prisma.broadcast.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const broadcastWithIdOnly = await prisma.broadcast.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BroadcastFindManyArgs>(args?: SelectSubset<T, BroadcastFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BroadcastPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Broadcast.
     * @param {BroadcastCreateArgs} args - Arguments to create a Broadcast.
     * @example
     * // Create one Broadcast
     * const Broadcast = await prisma.broadcast.create({
     *   data: {
     *     // ... data to create a Broadcast
     *   }
     * })
     * 
     */
    create<T extends BroadcastCreateArgs>(args: SelectSubset<T, BroadcastCreateArgs<ExtArgs>>): Prisma__BroadcastClient<$Result.GetResult<Prisma.$BroadcastPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Broadcasts.
     * @param {BroadcastCreateManyArgs} args - Arguments to create many Broadcasts.
     * @example
     * // Create many Broadcasts
     * const broadcast = await prisma.broadcast.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BroadcastCreateManyArgs>(args?: SelectSubset<T, BroadcastCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Broadcasts and returns the data saved in the database.
     * @param {BroadcastCreateManyAndReturnArgs} args - Arguments to create many Broadcasts.
     * @example
     * // Create many Broadcasts
     * const broadcast = await prisma.broadcast.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Broadcasts and only return the `id`
     * const broadcastWithIdOnly = await prisma.broadcast.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BroadcastCreateManyAndReturnArgs>(args?: SelectSubset<T, BroadcastCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BroadcastPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Broadcast.
     * @param {BroadcastDeleteArgs} args - Arguments to delete one Broadcast.
     * @example
     * // Delete one Broadcast
     * const Broadcast = await prisma.broadcast.delete({
     *   where: {
     *     // ... filter to delete one Broadcast
     *   }
     * })
     * 
     */
    delete<T extends BroadcastDeleteArgs>(args: SelectSubset<T, BroadcastDeleteArgs<ExtArgs>>): Prisma__BroadcastClient<$Result.GetResult<Prisma.$BroadcastPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Broadcast.
     * @param {BroadcastUpdateArgs} args - Arguments to update one Broadcast.
     * @example
     * // Update one Broadcast
     * const broadcast = await prisma.broadcast.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BroadcastUpdateArgs>(args: SelectSubset<T, BroadcastUpdateArgs<ExtArgs>>): Prisma__BroadcastClient<$Result.GetResult<Prisma.$BroadcastPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Broadcasts.
     * @param {BroadcastDeleteManyArgs} args - Arguments to filter Broadcasts to delete.
     * @example
     * // Delete a few Broadcasts
     * const { count } = await prisma.broadcast.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BroadcastDeleteManyArgs>(args?: SelectSubset<T, BroadcastDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Broadcasts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Broadcasts
     * const broadcast = await prisma.broadcast.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BroadcastUpdateManyArgs>(args: SelectSubset<T, BroadcastUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Broadcasts and returns the data updated in the database.
     * @param {BroadcastUpdateManyAndReturnArgs} args - Arguments to update many Broadcasts.
     * @example
     * // Update many Broadcasts
     * const broadcast = await prisma.broadcast.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Broadcasts and only return the `id`
     * const broadcastWithIdOnly = await prisma.broadcast.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BroadcastUpdateManyAndReturnArgs>(args: SelectSubset<T, BroadcastUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BroadcastPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Broadcast.
     * @param {BroadcastUpsertArgs} args - Arguments to update or create a Broadcast.
     * @example
     * // Update or create a Broadcast
     * const broadcast = await prisma.broadcast.upsert({
     *   create: {
     *     // ... data to create a Broadcast
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Broadcast we want to update
     *   }
     * })
     */
    upsert<T extends BroadcastUpsertArgs>(args: SelectSubset<T, BroadcastUpsertArgs<ExtArgs>>): Prisma__BroadcastClient<$Result.GetResult<Prisma.$BroadcastPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Broadcasts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastCountArgs} args - Arguments to filter Broadcasts to count.
     * @example
     * // Count the number of Broadcasts
     * const count = await prisma.broadcast.count({
     *   where: {
     *     // ... the filter for the Broadcasts we want to count
     *   }
     * })
    **/
    count<T extends BroadcastCountArgs>(
      args?: Subset<T, BroadcastCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BroadcastCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Broadcast.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BroadcastAggregateArgs>(args: Subset<T, BroadcastAggregateArgs>): Prisma.PrismaPromise<GetBroadcastAggregateType<T>>

    /**
     * Group by Broadcast.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BroadcastGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BroadcastGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BroadcastGroupByArgs['orderBy'] }
        : { orderBy?: BroadcastGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BroadcastGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBroadcastGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Broadcast model
   */
  readonly fields: BroadcastFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Broadcast.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BroadcastClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Broadcast model
   */ 
  interface BroadcastFieldRefs {
    readonly id: FieldRef<"Broadcast", 'Int'>
    readonly userId: FieldRef<"Broadcast", 'Int'>
    readonly broadcast: FieldRef<"Broadcast", 'String'>
    readonly tanggal_acara: FieldRef<"Broadcast", 'DateTime'>
    readonly status_broadcast: FieldRef<"Broadcast", 'StatusBroadcast'>
    readonly feedback: FieldRef<"Broadcast", 'String'>
    readonly createdAt: FieldRef<"Broadcast", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Broadcast findUnique
   */
  export type BroadcastFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastInclude<ExtArgs> | null
    /**
     * Filter, which Broadcast to fetch.
     */
    where: BroadcastWhereUniqueInput
  }

  /**
   * Broadcast findUniqueOrThrow
   */
  export type BroadcastFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastInclude<ExtArgs> | null
    /**
     * Filter, which Broadcast to fetch.
     */
    where: BroadcastWhereUniqueInput
  }

  /**
   * Broadcast findFirst
   */
  export type BroadcastFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastInclude<ExtArgs> | null
    /**
     * Filter, which Broadcast to fetch.
     */
    where?: BroadcastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Broadcasts to fetch.
     */
    orderBy?: BroadcastOrderByWithRelationInput | BroadcastOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Broadcasts.
     */
    cursor?: BroadcastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Broadcasts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Broadcasts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Broadcasts.
     */
    distinct?: BroadcastScalarFieldEnum | BroadcastScalarFieldEnum[]
  }

  /**
   * Broadcast findFirstOrThrow
   */
  export type BroadcastFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastInclude<ExtArgs> | null
    /**
     * Filter, which Broadcast to fetch.
     */
    where?: BroadcastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Broadcasts to fetch.
     */
    orderBy?: BroadcastOrderByWithRelationInput | BroadcastOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Broadcasts.
     */
    cursor?: BroadcastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Broadcasts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Broadcasts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Broadcasts.
     */
    distinct?: BroadcastScalarFieldEnum | BroadcastScalarFieldEnum[]
  }

  /**
   * Broadcast findMany
   */
  export type BroadcastFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastInclude<ExtArgs> | null
    /**
     * Filter, which Broadcasts to fetch.
     */
    where?: BroadcastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Broadcasts to fetch.
     */
    orderBy?: BroadcastOrderByWithRelationInput | BroadcastOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Broadcasts.
     */
    cursor?: BroadcastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Broadcasts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Broadcasts.
     */
    skip?: number
    distinct?: BroadcastScalarFieldEnum | BroadcastScalarFieldEnum[]
  }

  /**
   * Broadcast create
   */
  export type BroadcastCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastInclude<ExtArgs> | null
    /**
     * The data needed to create a Broadcast.
     */
    data: XOR<BroadcastCreateInput, BroadcastUncheckedCreateInput>
  }

  /**
   * Broadcast createMany
   */
  export type BroadcastCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Broadcasts.
     */
    data: BroadcastCreateManyInput | BroadcastCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Broadcast createManyAndReturn
   */
  export type BroadcastCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * The data used to create many Broadcasts.
     */
    data: BroadcastCreateManyInput | BroadcastCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Broadcast update
   */
  export type BroadcastUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastInclude<ExtArgs> | null
    /**
     * The data needed to update a Broadcast.
     */
    data: XOR<BroadcastUpdateInput, BroadcastUncheckedUpdateInput>
    /**
     * Choose, which Broadcast to update.
     */
    where: BroadcastWhereUniqueInput
  }

  /**
   * Broadcast updateMany
   */
  export type BroadcastUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Broadcasts.
     */
    data: XOR<BroadcastUpdateManyMutationInput, BroadcastUncheckedUpdateManyInput>
    /**
     * Filter which Broadcasts to update
     */
    where?: BroadcastWhereInput
    /**
     * Limit how many Broadcasts to update.
     */
    limit?: number
  }

  /**
   * Broadcast updateManyAndReturn
   */
  export type BroadcastUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * The data used to update Broadcasts.
     */
    data: XOR<BroadcastUpdateManyMutationInput, BroadcastUncheckedUpdateManyInput>
    /**
     * Filter which Broadcasts to update
     */
    where?: BroadcastWhereInput
    /**
     * Limit how many Broadcasts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Broadcast upsert
   */
  export type BroadcastUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastInclude<ExtArgs> | null
    /**
     * The filter to search for the Broadcast to update in case it exists.
     */
    where: BroadcastWhereUniqueInput
    /**
     * In case the Broadcast found by the `where` argument doesn't exist, create a new Broadcast with this data.
     */
    create: XOR<BroadcastCreateInput, BroadcastUncheckedCreateInput>
    /**
     * In case the Broadcast was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BroadcastUpdateInput, BroadcastUncheckedUpdateInput>
  }

  /**
   * Broadcast delete
   */
  export type BroadcastDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastInclude<ExtArgs> | null
    /**
     * Filter which Broadcast to delete.
     */
    where: BroadcastWhereUniqueInput
  }

  /**
   * Broadcast deleteMany
   */
  export type BroadcastDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Broadcasts to delete
     */
    where?: BroadcastWhereInput
    /**
     * Limit how many Broadcasts to delete.
     */
    limit?: number
  }

  /**
   * Broadcast without action
   */
  export type BroadcastDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broadcast
     */
    select?: BroadcastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broadcast
     */
    omit?: BroadcastOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BroadcastInclude<ExtArgs> | null
  }


  /**
   * Model Anggota
   */

  export type AggregateAnggota = {
    _count: AnggotaCountAggregateOutputType | null
    _avg: AnggotaAvgAggregateOutputType | null
    _sum: AnggotaSumAggregateOutputType | null
    _min: AnggotaMinAggregateOutputType | null
    _max: AnggotaMaxAggregateOutputType | null
  }

  export type AnggotaAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    nik: number | null
  }

  export type AnggotaSumAggregateOutputType = {
    id: number | null
    userId: number | null
    nik: number | null
  }

  export type AnggotaMinAggregateOutputType = {
    id: number | null
    userId: number | null
    nama: string | null
    nik: number | null
    gender: $Enums.Gender | null
    tempat_lahir: string | null
    tanggal_lahir: Date | null
    ktp: string | null
  }

  export type AnggotaMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    nama: string | null
    nik: number | null
    gender: $Enums.Gender | null
    tempat_lahir: string | null
    tanggal_lahir: Date | null
    ktp: string | null
  }

  export type AnggotaCountAggregateOutputType = {
    id: number
    userId: number
    nama: number
    nik: number
    gender: number
    tempat_lahir: number
    tanggal_lahir: number
    ktp: number
    _all: number
  }


  export type AnggotaAvgAggregateInputType = {
    id?: true
    userId?: true
    nik?: true
  }

  export type AnggotaSumAggregateInputType = {
    id?: true
    userId?: true
    nik?: true
  }

  export type AnggotaMinAggregateInputType = {
    id?: true
    userId?: true
    nama?: true
    nik?: true
    gender?: true
    tempat_lahir?: true
    tanggal_lahir?: true
    ktp?: true
  }

  export type AnggotaMaxAggregateInputType = {
    id?: true
    userId?: true
    nama?: true
    nik?: true
    gender?: true
    tempat_lahir?: true
    tanggal_lahir?: true
    ktp?: true
  }

  export type AnggotaCountAggregateInputType = {
    id?: true
    userId?: true
    nama?: true
    nik?: true
    gender?: true
    tempat_lahir?: true
    tanggal_lahir?: true
    ktp?: true
    _all?: true
  }

  export type AnggotaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Anggota to aggregate.
     */
    where?: AnggotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anggotas to fetch.
     */
    orderBy?: AnggotaOrderByWithRelationInput | AnggotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnggotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anggotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anggotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Anggotas
    **/
    _count?: true | AnggotaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnggotaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnggotaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnggotaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnggotaMaxAggregateInputType
  }

  export type GetAnggotaAggregateType<T extends AnggotaAggregateArgs> = {
        [P in keyof T & keyof AggregateAnggota]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnggota[P]>
      : GetScalarType<T[P], AggregateAnggota[P]>
  }




  export type AnggotaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnggotaWhereInput
    orderBy?: AnggotaOrderByWithAggregationInput | AnggotaOrderByWithAggregationInput[]
    by: AnggotaScalarFieldEnum[] | AnggotaScalarFieldEnum
    having?: AnggotaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnggotaCountAggregateInputType | true
    _avg?: AnggotaAvgAggregateInputType
    _sum?: AnggotaSumAggregateInputType
    _min?: AnggotaMinAggregateInputType
    _max?: AnggotaMaxAggregateInputType
  }

  export type AnggotaGroupByOutputType = {
    id: number
    userId: number
    nama: string
    nik: number
    gender: $Enums.Gender
    tempat_lahir: string
    tanggal_lahir: Date
    ktp: string
    _count: AnggotaCountAggregateOutputType | null
    _avg: AnggotaAvgAggregateOutputType | null
    _sum: AnggotaSumAggregateOutputType | null
    _min: AnggotaMinAggregateOutputType | null
    _max: AnggotaMaxAggregateOutputType | null
  }

  type GetAnggotaGroupByPayload<T extends AnggotaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnggotaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnggotaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnggotaGroupByOutputType[P]>
            : GetScalarType<T[P], AnggotaGroupByOutputType[P]>
        }
      >
    >


  export type AnggotaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nama?: boolean
    nik?: boolean
    gender?: boolean
    tempat_lahir?: boolean
    tanggal_lahir?: boolean
    ktp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["anggota"]>

  export type AnggotaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nama?: boolean
    nik?: boolean
    gender?: boolean
    tempat_lahir?: boolean
    tanggal_lahir?: boolean
    ktp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["anggota"]>

  export type AnggotaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nama?: boolean
    nik?: boolean
    gender?: boolean
    tempat_lahir?: boolean
    tanggal_lahir?: boolean
    ktp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["anggota"]>

  export type AnggotaSelectScalar = {
    id?: boolean
    userId?: boolean
    nama?: boolean
    nik?: boolean
    gender?: boolean
    tempat_lahir?: boolean
    tanggal_lahir?: boolean
    ktp?: boolean
  }

  export type AnggotaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "nama" | "nik" | "gender" | "tempat_lahir" | "tanggal_lahir" | "ktp", ExtArgs["result"]["anggota"]>
  export type AnggotaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AnggotaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AnggotaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AnggotaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Anggota"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      nama: string
      nik: number
      gender: $Enums.Gender
      tempat_lahir: string
      tanggal_lahir: Date
      ktp: string
    }, ExtArgs["result"]["anggota"]>
    composites: {}
  }

  type AnggotaGetPayload<S extends boolean | null | undefined | AnggotaDefaultArgs> = $Result.GetResult<Prisma.$AnggotaPayload, S>

  type AnggotaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnggotaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnggotaCountAggregateInputType | true
    }

  export interface AnggotaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Anggota'], meta: { name: 'Anggota' } }
    /**
     * Find zero or one Anggota that matches the filter.
     * @param {AnggotaFindUniqueArgs} args - Arguments to find a Anggota
     * @example
     * // Get one Anggota
     * const anggota = await prisma.anggota.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnggotaFindUniqueArgs>(args: SelectSubset<T, AnggotaFindUniqueArgs<ExtArgs>>): Prisma__AnggotaClient<$Result.GetResult<Prisma.$AnggotaPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Anggota that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnggotaFindUniqueOrThrowArgs} args - Arguments to find a Anggota
     * @example
     * // Get one Anggota
     * const anggota = await prisma.anggota.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnggotaFindUniqueOrThrowArgs>(args: SelectSubset<T, AnggotaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnggotaClient<$Result.GetResult<Prisma.$AnggotaPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Anggota that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnggotaFindFirstArgs} args - Arguments to find a Anggota
     * @example
     * // Get one Anggota
     * const anggota = await prisma.anggota.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnggotaFindFirstArgs>(args?: SelectSubset<T, AnggotaFindFirstArgs<ExtArgs>>): Prisma__AnggotaClient<$Result.GetResult<Prisma.$AnggotaPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Anggota that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnggotaFindFirstOrThrowArgs} args - Arguments to find a Anggota
     * @example
     * // Get one Anggota
     * const anggota = await prisma.anggota.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnggotaFindFirstOrThrowArgs>(args?: SelectSubset<T, AnggotaFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnggotaClient<$Result.GetResult<Prisma.$AnggotaPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Anggotas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnggotaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Anggotas
     * const anggotas = await prisma.anggota.findMany()
     * 
     * // Get first 10 Anggotas
     * const anggotas = await prisma.anggota.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const anggotaWithIdOnly = await prisma.anggota.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnggotaFindManyArgs>(args?: SelectSubset<T, AnggotaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnggotaPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Anggota.
     * @param {AnggotaCreateArgs} args - Arguments to create a Anggota.
     * @example
     * // Create one Anggota
     * const Anggota = await prisma.anggota.create({
     *   data: {
     *     // ... data to create a Anggota
     *   }
     * })
     * 
     */
    create<T extends AnggotaCreateArgs>(args: SelectSubset<T, AnggotaCreateArgs<ExtArgs>>): Prisma__AnggotaClient<$Result.GetResult<Prisma.$AnggotaPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Anggotas.
     * @param {AnggotaCreateManyArgs} args - Arguments to create many Anggotas.
     * @example
     * // Create many Anggotas
     * const anggota = await prisma.anggota.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnggotaCreateManyArgs>(args?: SelectSubset<T, AnggotaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Anggotas and returns the data saved in the database.
     * @param {AnggotaCreateManyAndReturnArgs} args - Arguments to create many Anggotas.
     * @example
     * // Create many Anggotas
     * const anggota = await prisma.anggota.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Anggotas and only return the `id`
     * const anggotaWithIdOnly = await prisma.anggota.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnggotaCreateManyAndReturnArgs>(args?: SelectSubset<T, AnggotaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnggotaPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Anggota.
     * @param {AnggotaDeleteArgs} args - Arguments to delete one Anggota.
     * @example
     * // Delete one Anggota
     * const Anggota = await prisma.anggota.delete({
     *   where: {
     *     // ... filter to delete one Anggota
     *   }
     * })
     * 
     */
    delete<T extends AnggotaDeleteArgs>(args: SelectSubset<T, AnggotaDeleteArgs<ExtArgs>>): Prisma__AnggotaClient<$Result.GetResult<Prisma.$AnggotaPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Anggota.
     * @param {AnggotaUpdateArgs} args - Arguments to update one Anggota.
     * @example
     * // Update one Anggota
     * const anggota = await prisma.anggota.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnggotaUpdateArgs>(args: SelectSubset<T, AnggotaUpdateArgs<ExtArgs>>): Prisma__AnggotaClient<$Result.GetResult<Prisma.$AnggotaPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Anggotas.
     * @param {AnggotaDeleteManyArgs} args - Arguments to filter Anggotas to delete.
     * @example
     * // Delete a few Anggotas
     * const { count } = await prisma.anggota.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnggotaDeleteManyArgs>(args?: SelectSubset<T, AnggotaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anggotas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnggotaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Anggotas
     * const anggota = await prisma.anggota.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnggotaUpdateManyArgs>(args: SelectSubset<T, AnggotaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anggotas and returns the data updated in the database.
     * @param {AnggotaUpdateManyAndReturnArgs} args - Arguments to update many Anggotas.
     * @example
     * // Update many Anggotas
     * const anggota = await prisma.anggota.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Anggotas and only return the `id`
     * const anggotaWithIdOnly = await prisma.anggota.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnggotaUpdateManyAndReturnArgs>(args: SelectSubset<T, AnggotaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnggotaPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Anggota.
     * @param {AnggotaUpsertArgs} args - Arguments to update or create a Anggota.
     * @example
     * // Update or create a Anggota
     * const anggota = await prisma.anggota.upsert({
     *   create: {
     *     // ... data to create a Anggota
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Anggota we want to update
     *   }
     * })
     */
    upsert<T extends AnggotaUpsertArgs>(args: SelectSubset<T, AnggotaUpsertArgs<ExtArgs>>): Prisma__AnggotaClient<$Result.GetResult<Prisma.$AnggotaPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Anggotas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnggotaCountArgs} args - Arguments to filter Anggotas to count.
     * @example
     * // Count the number of Anggotas
     * const count = await prisma.anggota.count({
     *   where: {
     *     // ... the filter for the Anggotas we want to count
     *   }
     * })
    **/
    count<T extends AnggotaCountArgs>(
      args?: Subset<T, AnggotaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnggotaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Anggota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnggotaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnggotaAggregateArgs>(args: Subset<T, AnggotaAggregateArgs>): Prisma.PrismaPromise<GetAnggotaAggregateType<T>>

    /**
     * Group by Anggota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnggotaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnggotaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnggotaGroupByArgs['orderBy'] }
        : { orderBy?: AnggotaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnggotaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnggotaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Anggota model
   */
  readonly fields: AnggotaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Anggota.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnggotaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Anggota model
   */ 
  interface AnggotaFieldRefs {
    readonly id: FieldRef<"Anggota", 'Int'>
    readonly userId: FieldRef<"Anggota", 'Int'>
    readonly nama: FieldRef<"Anggota", 'String'>
    readonly nik: FieldRef<"Anggota", 'Int'>
    readonly gender: FieldRef<"Anggota", 'Gender'>
    readonly tempat_lahir: FieldRef<"Anggota", 'String'>
    readonly tanggal_lahir: FieldRef<"Anggota", 'DateTime'>
    readonly ktp: FieldRef<"Anggota", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Anggota findUnique
   */
  export type AnggotaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaInclude<ExtArgs> | null
    /**
     * Filter, which Anggota to fetch.
     */
    where: AnggotaWhereUniqueInput
  }

  /**
   * Anggota findUniqueOrThrow
   */
  export type AnggotaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaInclude<ExtArgs> | null
    /**
     * Filter, which Anggota to fetch.
     */
    where: AnggotaWhereUniqueInput
  }

  /**
   * Anggota findFirst
   */
  export type AnggotaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaInclude<ExtArgs> | null
    /**
     * Filter, which Anggota to fetch.
     */
    where?: AnggotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anggotas to fetch.
     */
    orderBy?: AnggotaOrderByWithRelationInput | AnggotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anggotas.
     */
    cursor?: AnggotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anggotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anggotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anggotas.
     */
    distinct?: AnggotaScalarFieldEnum | AnggotaScalarFieldEnum[]
  }

  /**
   * Anggota findFirstOrThrow
   */
  export type AnggotaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaInclude<ExtArgs> | null
    /**
     * Filter, which Anggota to fetch.
     */
    where?: AnggotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anggotas to fetch.
     */
    orderBy?: AnggotaOrderByWithRelationInput | AnggotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anggotas.
     */
    cursor?: AnggotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anggotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anggotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anggotas.
     */
    distinct?: AnggotaScalarFieldEnum | AnggotaScalarFieldEnum[]
  }

  /**
   * Anggota findMany
   */
  export type AnggotaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaInclude<ExtArgs> | null
    /**
     * Filter, which Anggotas to fetch.
     */
    where?: AnggotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anggotas to fetch.
     */
    orderBy?: AnggotaOrderByWithRelationInput | AnggotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Anggotas.
     */
    cursor?: AnggotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anggotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anggotas.
     */
    skip?: number
    distinct?: AnggotaScalarFieldEnum | AnggotaScalarFieldEnum[]
  }

  /**
   * Anggota create
   */
  export type AnggotaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaInclude<ExtArgs> | null
    /**
     * The data needed to create a Anggota.
     */
    data: XOR<AnggotaCreateInput, AnggotaUncheckedCreateInput>
  }

  /**
   * Anggota createMany
   */
  export type AnggotaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Anggotas.
     */
    data: AnggotaCreateManyInput | AnggotaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Anggota createManyAndReturn
   */
  export type AnggotaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * The data used to create many Anggotas.
     */
    data: AnggotaCreateManyInput | AnggotaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Anggota update
   */
  export type AnggotaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaInclude<ExtArgs> | null
    /**
     * The data needed to update a Anggota.
     */
    data: XOR<AnggotaUpdateInput, AnggotaUncheckedUpdateInput>
    /**
     * Choose, which Anggota to update.
     */
    where: AnggotaWhereUniqueInput
  }

  /**
   * Anggota updateMany
   */
  export type AnggotaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Anggotas.
     */
    data: XOR<AnggotaUpdateManyMutationInput, AnggotaUncheckedUpdateManyInput>
    /**
     * Filter which Anggotas to update
     */
    where?: AnggotaWhereInput
    /**
     * Limit how many Anggotas to update.
     */
    limit?: number
  }

  /**
   * Anggota updateManyAndReturn
   */
  export type AnggotaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * The data used to update Anggotas.
     */
    data: XOR<AnggotaUpdateManyMutationInput, AnggotaUncheckedUpdateManyInput>
    /**
     * Filter which Anggotas to update
     */
    where?: AnggotaWhereInput
    /**
     * Limit how many Anggotas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Anggota upsert
   */
  export type AnggotaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaInclude<ExtArgs> | null
    /**
     * The filter to search for the Anggota to update in case it exists.
     */
    where: AnggotaWhereUniqueInput
    /**
     * In case the Anggota found by the `where` argument doesn't exist, create a new Anggota with this data.
     */
    create: XOR<AnggotaCreateInput, AnggotaUncheckedCreateInput>
    /**
     * In case the Anggota was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnggotaUpdateInput, AnggotaUncheckedUpdateInput>
  }

  /**
   * Anggota delete
   */
  export type AnggotaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaInclude<ExtArgs> | null
    /**
     * Filter which Anggota to delete.
     */
    where: AnggotaWhereUniqueInput
  }

  /**
   * Anggota deleteMany
   */
  export type AnggotaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Anggotas to delete
     */
    where?: AnggotaWhereInput
    /**
     * Limit how many Anggotas to delete.
     */
    limit?: number
  }

  /**
   * Anggota without action
   */
  export type AnggotaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anggota
     */
    select?: AnggotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anggota
     */
    omit?: AnggotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnggotaInclude<ExtArgs> | null
  }


  /**
   * Model Kendala
   */

  export type AggregateKendala = {
    _count: KendalaCountAggregateOutputType | null
    _avg: KendalaAvgAggregateOutputType | null
    _sum: KendalaSumAggregateOutputType | null
    _min: KendalaMinAggregateOutputType | null
    _max: KendalaMaxAggregateOutputType | null
  }

  export type KendalaAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type KendalaSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type KendalaMinAggregateOutputType = {
    id: number | null
    userId: number | null
    kendala: string | null
    kategori: $Enums.Kategori | null
    status_kendala: $Enums.StatusKendala | null
    feedback: string | null
    created_at: Date | null
    updatedAt: Date | null
  }

  export type KendalaMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    kendala: string | null
    kategori: $Enums.Kategori | null
    status_kendala: $Enums.StatusKendala | null
    feedback: string | null
    created_at: Date | null
    updatedAt: Date | null
  }

  export type KendalaCountAggregateOutputType = {
    id: number
    userId: number
    kendala: number
    kategori: number
    status_kendala: number
    feedback: number
    created_at: number
    updatedAt: number
    _all: number
  }


  export type KendalaAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type KendalaSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type KendalaMinAggregateInputType = {
    id?: true
    userId?: true
    kendala?: true
    kategori?: true
    status_kendala?: true
    feedback?: true
    created_at?: true
    updatedAt?: true
  }

  export type KendalaMaxAggregateInputType = {
    id?: true
    userId?: true
    kendala?: true
    kategori?: true
    status_kendala?: true
    feedback?: true
    created_at?: true
    updatedAt?: true
  }

  export type KendalaCountAggregateInputType = {
    id?: true
    userId?: true
    kendala?: true
    kategori?: true
    status_kendala?: true
    feedback?: true
    created_at?: true
    updatedAt?: true
    _all?: true
  }

  export type KendalaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kendala to aggregate.
     */
    where?: KendalaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kendalas to fetch.
     */
    orderBy?: KendalaOrderByWithRelationInput | KendalaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KendalaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kendalas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kendalas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kendalas
    **/
    _count?: true | KendalaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KendalaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KendalaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KendalaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KendalaMaxAggregateInputType
  }

  export type GetKendalaAggregateType<T extends KendalaAggregateArgs> = {
        [P in keyof T & keyof AggregateKendala]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKendala[P]>
      : GetScalarType<T[P], AggregateKendala[P]>
  }




  export type KendalaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KendalaWhereInput
    orderBy?: KendalaOrderByWithAggregationInput | KendalaOrderByWithAggregationInput[]
    by: KendalaScalarFieldEnum[] | KendalaScalarFieldEnum
    having?: KendalaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KendalaCountAggregateInputType | true
    _avg?: KendalaAvgAggregateInputType
    _sum?: KendalaSumAggregateInputType
    _min?: KendalaMinAggregateInputType
    _max?: KendalaMaxAggregateInputType
  }

  export type KendalaGroupByOutputType = {
    id: number
    userId: number
    kendala: string
    kategori: $Enums.Kategori
    status_kendala: $Enums.StatusKendala
    feedback: string
    created_at: Date
    updatedAt: Date
    _count: KendalaCountAggregateOutputType | null
    _avg: KendalaAvgAggregateOutputType | null
    _sum: KendalaSumAggregateOutputType | null
    _min: KendalaMinAggregateOutputType | null
    _max: KendalaMaxAggregateOutputType | null
  }

  type GetKendalaGroupByPayload<T extends KendalaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KendalaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KendalaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KendalaGroupByOutputType[P]>
            : GetScalarType<T[P], KendalaGroupByOutputType[P]>
        }
      >
    >


  export type KendalaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    kendala?: boolean
    kategori?: boolean
    status_kendala?: boolean
    feedback?: boolean
    created_at?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kendala"]>

  export type KendalaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    kendala?: boolean
    kategori?: boolean
    status_kendala?: boolean
    feedback?: boolean
    created_at?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kendala"]>

  export type KendalaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    kendala?: boolean
    kategori?: boolean
    status_kendala?: boolean
    feedback?: boolean
    created_at?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kendala"]>

  export type KendalaSelectScalar = {
    id?: boolean
    userId?: boolean
    kendala?: boolean
    kategori?: boolean
    status_kendala?: boolean
    feedback?: boolean
    created_at?: boolean
    updatedAt?: boolean
  }

  export type KendalaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "kendala" | "kategori" | "status_kendala" | "feedback" | "created_at" | "updatedAt", ExtArgs["result"]["kendala"]>
  export type KendalaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type KendalaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type KendalaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $KendalaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kendala"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      kendala: string
      kategori: $Enums.Kategori
      status_kendala: $Enums.StatusKendala
      feedback: string
      created_at: Date
      updatedAt: Date
    }, ExtArgs["result"]["kendala"]>
    composites: {}
  }

  type KendalaGetPayload<S extends boolean | null | undefined | KendalaDefaultArgs> = $Result.GetResult<Prisma.$KendalaPayload, S>

  type KendalaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KendalaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KendalaCountAggregateInputType | true
    }

  export interface KendalaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kendala'], meta: { name: 'Kendala' } }
    /**
     * Find zero or one Kendala that matches the filter.
     * @param {KendalaFindUniqueArgs} args - Arguments to find a Kendala
     * @example
     * // Get one Kendala
     * const kendala = await prisma.kendala.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KendalaFindUniqueArgs>(args: SelectSubset<T, KendalaFindUniqueArgs<ExtArgs>>): Prisma__KendalaClient<$Result.GetResult<Prisma.$KendalaPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Kendala that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KendalaFindUniqueOrThrowArgs} args - Arguments to find a Kendala
     * @example
     * // Get one Kendala
     * const kendala = await prisma.kendala.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KendalaFindUniqueOrThrowArgs>(args: SelectSubset<T, KendalaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KendalaClient<$Result.GetResult<Prisma.$KendalaPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Kendala that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KendalaFindFirstArgs} args - Arguments to find a Kendala
     * @example
     * // Get one Kendala
     * const kendala = await prisma.kendala.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KendalaFindFirstArgs>(args?: SelectSubset<T, KendalaFindFirstArgs<ExtArgs>>): Prisma__KendalaClient<$Result.GetResult<Prisma.$KendalaPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Kendala that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KendalaFindFirstOrThrowArgs} args - Arguments to find a Kendala
     * @example
     * // Get one Kendala
     * const kendala = await prisma.kendala.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KendalaFindFirstOrThrowArgs>(args?: SelectSubset<T, KendalaFindFirstOrThrowArgs<ExtArgs>>): Prisma__KendalaClient<$Result.GetResult<Prisma.$KendalaPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Kendalas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KendalaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kendalas
     * const kendalas = await prisma.kendala.findMany()
     * 
     * // Get first 10 Kendalas
     * const kendalas = await prisma.kendala.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kendalaWithIdOnly = await prisma.kendala.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KendalaFindManyArgs>(args?: SelectSubset<T, KendalaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KendalaPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Kendala.
     * @param {KendalaCreateArgs} args - Arguments to create a Kendala.
     * @example
     * // Create one Kendala
     * const Kendala = await prisma.kendala.create({
     *   data: {
     *     // ... data to create a Kendala
     *   }
     * })
     * 
     */
    create<T extends KendalaCreateArgs>(args: SelectSubset<T, KendalaCreateArgs<ExtArgs>>): Prisma__KendalaClient<$Result.GetResult<Prisma.$KendalaPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Kendalas.
     * @param {KendalaCreateManyArgs} args - Arguments to create many Kendalas.
     * @example
     * // Create many Kendalas
     * const kendala = await prisma.kendala.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KendalaCreateManyArgs>(args?: SelectSubset<T, KendalaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Kendalas and returns the data saved in the database.
     * @param {KendalaCreateManyAndReturnArgs} args - Arguments to create many Kendalas.
     * @example
     * // Create many Kendalas
     * const kendala = await prisma.kendala.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Kendalas and only return the `id`
     * const kendalaWithIdOnly = await prisma.kendala.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KendalaCreateManyAndReturnArgs>(args?: SelectSubset<T, KendalaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KendalaPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Kendala.
     * @param {KendalaDeleteArgs} args - Arguments to delete one Kendala.
     * @example
     * // Delete one Kendala
     * const Kendala = await prisma.kendala.delete({
     *   where: {
     *     // ... filter to delete one Kendala
     *   }
     * })
     * 
     */
    delete<T extends KendalaDeleteArgs>(args: SelectSubset<T, KendalaDeleteArgs<ExtArgs>>): Prisma__KendalaClient<$Result.GetResult<Prisma.$KendalaPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Kendala.
     * @param {KendalaUpdateArgs} args - Arguments to update one Kendala.
     * @example
     * // Update one Kendala
     * const kendala = await prisma.kendala.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KendalaUpdateArgs>(args: SelectSubset<T, KendalaUpdateArgs<ExtArgs>>): Prisma__KendalaClient<$Result.GetResult<Prisma.$KendalaPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Kendalas.
     * @param {KendalaDeleteManyArgs} args - Arguments to filter Kendalas to delete.
     * @example
     * // Delete a few Kendalas
     * const { count } = await prisma.kendala.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KendalaDeleteManyArgs>(args?: SelectSubset<T, KendalaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kendalas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KendalaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kendalas
     * const kendala = await prisma.kendala.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KendalaUpdateManyArgs>(args: SelectSubset<T, KendalaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kendalas and returns the data updated in the database.
     * @param {KendalaUpdateManyAndReturnArgs} args - Arguments to update many Kendalas.
     * @example
     * // Update many Kendalas
     * const kendala = await prisma.kendala.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Kendalas and only return the `id`
     * const kendalaWithIdOnly = await prisma.kendala.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KendalaUpdateManyAndReturnArgs>(args: SelectSubset<T, KendalaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KendalaPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Kendala.
     * @param {KendalaUpsertArgs} args - Arguments to update or create a Kendala.
     * @example
     * // Update or create a Kendala
     * const kendala = await prisma.kendala.upsert({
     *   create: {
     *     // ... data to create a Kendala
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kendala we want to update
     *   }
     * })
     */
    upsert<T extends KendalaUpsertArgs>(args: SelectSubset<T, KendalaUpsertArgs<ExtArgs>>): Prisma__KendalaClient<$Result.GetResult<Prisma.$KendalaPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Kendalas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KendalaCountArgs} args - Arguments to filter Kendalas to count.
     * @example
     * // Count the number of Kendalas
     * const count = await prisma.kendala.count({
     *   where: {
     *     // ... the filter for the Kendalas we want to count
     *   }
     * })
    **/
    count<T extends KendalaCountArgs>(
      args?: Subset<T, KendalaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KendalaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kendala.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KendalaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KendalaAggregateArgs>(args: Subset<T, KendalaAggregateArgs>): Prisma.PrismaPromise<GetKendalaAggregateType<T>>

    /**
     * Group by Kendala.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KendalaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KendalaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KendalaGroupByArgs['orderBy'] }
        : { orderBy?: KendalaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KendalaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKendalaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kendala model
   */
  readonly fields: KendalaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kendala.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KendalaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Kendala model
   */ 
  interface KendalaFieldRefs {
    readonly id: FieldRef<"Kendala", 'Int'>
    readonly userId: FieldRef<"Kendala", 'Int'>
    readonly kendala: FieldRef<"Kendala", 'String'>
    readonly kategori: FieldRef<"Kendala", 'Kategori'>
    readonly status_kendala: FieldRef<"Kendala", 'StatusKendala'>
    readonly feedback: FieldRef<"Kendala", 'String'>
    readonly created_at: FieldRef<"Kendala", 'DateTime'>
    readonly updatedAt: FieldRef<"Kendala", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Kendala findUnique
   */
  export type KendalaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaInclude<ExtArgs> | null
    /**
     * Filter, which Kendala to fetch.
     */
    where: KendalaWhereUniqueInput
  }

  /**
   * Kendala findUniqueOrThrow
   */
  export type KendalaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaInclude<ExtArgs> | null
    /**
     * Filter, which Kendala to fetch.
     */
    where: KendalaWhereUniqueInput
  }

  /**
   * Kendala findFirst
   */
  export type KendalaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaInclude<ExtArgs> | null
    /**
     * Filter, which Kendala to fetch.
     */
    where?: KendalaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kendalas to fetch.
     */
    orderBy?: KendalaOrderByWithRelationInput | KendalaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kendalas.
     */
    cursor?: KendalaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kendalas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kendalas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kendalas.
     */
    distinct?: KendalaScalarFieldEnum | KendalaScalarFieldEnum[]
  }

  /**
   * Kendala findFirstOrThrow
   */
  export type KendalaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaInclude<ExtArgs> | null
    /**
     * Filter, which Kendala to fetch.
     */
    where?: KendalaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kendalas to fetch.
     */
    orderBy?: KendalaOrderByWithRelationInput | KendalaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kendalas.
     */
    cursor?: KendalaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kendalas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kendalas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kendalas.
     */
    distinct?: KendalaScalarFieldEnum | KendalaScalarFieldEnum[]
  }

  /**
   * Kendala findMany
   */
  export type KendalaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaInclude<ExtArgs> | null
    /**
     * Filter, which Kendalas to fetch.
     */
    where?: KendalaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kendalas to fetch.
     */
    orderBy?: KendalaOrderByWithRelationInput | KendalaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kendalas.
     */
    cursor?: KendalaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kendalas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kendalas.
     */
    skip?: number
    distinct?: KendalaScalarFieldEnum | KendalaScalarFieldEnum[]
  }

  /**
   * Kendala create
   */
  export type KendalaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaInclude<ExtArgs> | null
    /**
     * The data needed to create a Kendala.
     */
    data: XOR<KendalaCreateInput, KendalaUncheckedCreateInput>
  }

  /**
   * Kendala createMany
   */
  export type KendalaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kendalas.
     */
    data: KendalaCreateManyInput | KendalaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Kendala createManyAndReturn
   */
  export type KendalaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * The data used to create many Kendalas.
     */
    data: KendalaCreateManyInput | KendalaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Kendala update
   */
  export type KendalaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaInclude<ExtArgs> | null
    /**
     * The data needed to update a Kendala.
     */
    data: XOR<KendalaUpdateInput, KendalaUncheckedUpdateInput>
    /**
     * Choose, which Kendala to update.
     */
    where: KendalaWhereUniqueInput
  }

  /**
   * Kendala updateMany
   */
  export type KendalaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kendalas.
     */
    data: XOR<KendalaUpdateManyMutationInput, KendalaUncheckedUpdateManyInput>
    /**
     * Filter which Kendalas to update
     */
    where?: KendalaWhereInput
    /**
     * Limit how many Kendalas to update.
     */
    limit?: number
  }

  /**
   * Kendala updateManyAndReturn
   */
  export type KendalaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * The data used to update Kendalas.
     */
    data: XOR<KendalaUpdateManyMutationInput, KendalaUncheckedUpdateManyInput>
    /**
     * Filter which Kendalas to update
     */
    where?: KendalaWhereInput
    /**
     * Limit how many Kendalas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Kendala upsert
   */
  export type KendalaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaInclude<ExtArgs> | null
    /**
     * The filter to search for the Kendala to update in case it exists.
     */
    where: KendalaWhereUniqueInput
    /**
     * In case the Kendala found by the `where` argument doesn't exist, create a new Kendala with this data.
     */
    create: XOR<KendalaCreateInput, KendalaUncheckedCreateInput>
    /**
     * In case the Kendala was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KendalaUpdateInput, KendalaUncheckedUpdateInput>
  }

  /**
   * Kendala delete
   */
  export type KendalaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaInclude<ExtArgs> | null
    /**
     * Filter which Kendala to delete.
     */
    where: KendalaWhereUniqueInput
  }

  /**
   * Kendala deleteMany
   */
  export type KendalaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kendalas to delete
     */
    where?: KendalaWhereInput
    /**
     * Limit how many Kendalas to delete.
     */
    limit?: number
  }

  /**
   * Kendala without action
   */
  export type KendalaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kendala
     */
    select?: KendalaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kendala
     */
    omit?: KendalaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KendalaInclude<ExtArgs> | null
  }


  /**
   * Model Peraturan
   */

  export type AggregatePeraturan = {
    _count: PeraturanCountAggregateOutputType | null
    _avg: PeraturanAvgAggregateOutputType | null
    _sum: PeraturanSumAggregateOutputType | null
    _min: PeraturanMinAggregateOutputType | null
    _max: PeraturanMaxAggregateOutputType | null
  }

  export type PeraturanAvgAggregateOutputType = {
    id: number | null
  }

  export type PeraturanSumAggregateOutputType = {
    id: number | null
  }

  export type PeraturanMinAggregateOutputType = {
    id: number | null
    peraturan: string | null
  }

  export type PeraturanMaxAggregateOutputType = {
    id: number | null
    peraturan: string | null
  }

  export type PeraturanCountAggregateOutputType = {
    id: number
    peraturan: number
    _all: number
  }


  export type PeraturanAvgAggregateInputType = {
    id?: true
  }

  export type PeraturanSumAggregateInputType = {
    id?: true
  }

  export type PeraturanMinAggregateInputType = {
    id?: true
    peraturan?: true
  }

  export type PeraturanMaxAggregateInputType = {
    id?: true
    peraturan?: true
  }

  export type PeraturanCountAggregateInputType = {
    id?: true
    peraturan?: true
    _all?: true
  }

  export type PeraturanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Peraturan to aggregate.
     */
    where?: PeraturanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Peraturans to fetch.
     */
    orderBy?: PeraturanOrderByWithRelationInput | PeraturanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PeraturanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Peraturans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Peraturans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Peraturans
    **/
    _count?: true | PeraturanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PeraturanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PeraturanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PeraturanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PeraturanMaxAggregateInputType
  }

  export type GetPeraturanAggregateType<T extends PeraturanAggregateArgs> = {
        [P in keyof T & keyof AggregatePeraturan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePeraturan[P]>
      : GetScalarType<T[P], AggregatePeraturan[P]>
  }




  export type PeraturanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PeraturanWhereInput
    orderBy?: PeraturanOrderByWithAggregationInput | PeraturanOrderByWithAggregationInput[]
    by: PeraturanScalarFieldEnum[] | PeraturanScalarFieldEnum
    having?: PeraturanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PeraturanCountAggregateInputType | true
    _avg?: PeraturanAvgAggregateInputType
    _sum?: PeraturanSumAggregateInputType
    _min?: PeraturanMinAggregateInputType
    _max?: PeraturanMaxAggregateInputType
  }

  export type PeraturanGroupByOutputType = {
    id: number
    peraturan: string
    _count: PeraturanCountAggregateOutputType | null
    _avg: PeraturanAvgAggregateOutputType | null
    _sum: PeraturanSumAggregateOutputType | null
    _min: PeraturanMinAggregateOutputType | null
    _max: PeraturanMaxAggregateOutputType | null
  }

  type GetPeraturanGroupByPayload<T extends PeraturanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PeraturanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PeraturanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PeraturanGroupByOutputType[P]>
            : GetScalarType<T[P], PeraturanGroupByOutputType[P]>
        }
      >
    >


  export type PeraturanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    peraturan?: boolean
  }, ExtArgs["result"]["peraturan"]>

  export type PeraturanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    peraturan?: boolean
  }, ExtArgs["result"]["peraturan"]>

  export type PeraturanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    peraturan?: boolean
  }, ExtArgs["result"]["peraturan"]>

  export type PeraturanSelectScalar = {
    id?: boolean
    peraturan?: boolean
  }

  export type PeraturanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "peraturan", ExtArgs["result"]["peraturan"]>

  export type $PeraturanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Peraturan"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      peraturan: string
    }, ExtArgs["result"]["peraturan"]>
    composites: {}
  }

  type PeraturanGetPayload<S extends boolean | null | undefined | PeraturanDefaultArgs> = $Result.GetResult<Prisma.$PeraturanPayload, S>

  type PeraturanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PeraturanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PeraturanCountAggregateInputType | true
    }

  export interface PeraturanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Peraturan'], meta: { name: 'Peraturan' } }
    /**
     * Find zero or one Peraturan that matches the filter.
     * @param {PeraturanFindUniqueArgs} args - Arguments to find a Peraturan
     * @example
     * // Get one Peraturan
     * const peraturan = await prisma.peraturan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PeraturanFindUniqueArgs>(args: SelectSubset<T, PeraturanFindUniqueArgs<ExtArgs>>): Prisma__PeraturanClient<$Result.GetResult<Prisma.$PeraturanPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Peraturan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PeraturanFindUniqueOrThrowArgs} args - Arguments to find a Peraturan
     * @example
     * // Get one Peraturan
     * const peraturan = await prisma.peraturan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PeraturanFindUniqueOrThrowArgs>(args: SelectSubset<T, PeraturanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PeraturanClient<$Result.GetResult<Prisma.$PeraturanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Peraturan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeraturanFindFirstArgs} args - Arguments to find a Peraturan
     * @example
     * // Get one Peraturan
     * const peraturan = await prisma.peraturan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PeraturanFindFirstArgs>(args?: SelectSubset<T, PeraturanFindFirstArgs<ExtArgs>>): Prisma__PeraturanClient<$Result.GetResult<Prisma.$PeraturanPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Peraturan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeraturanFindFirstOrThrowArgs} args - Arguments to find a Peraturan
     * @example
     * // Get one Peraturan
     * const peraturan = await prisma.peraturan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PeraturanFindFirstOrThrowArgs>(args?: SelectSubset<T, PeraturanFindFirstOrThrowArgs<ExtArgs>>): Prisma__PeraturanClient<$Result.GetResult<Prisma.$PeraturanPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Peraturans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeraturanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Peraturans
     * const peraturans = await prisma.peraturan.findMany()
     * 
     * // Get first 10 Peraturans
     * const peraturans = await prisma.peraturan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const peraturanWithIdOnly = await prisma.peraturan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PeraturanFindManyArgs>(args?: SelectSubset<T, PeraturanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PeraturanPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Peraturan.
     * @param {PeraturanCreateArgs} args - Arguments to create a Peraturan.
     * @example
     * // Create one Peraturan
     * const Peraturan = await prisma.peraturan.create({
     *   data: {
     *     // ... data to create a Peraturan
     *   }
     * })
     * 
     */
    create<T extends PeraturanCreateArgs>(args: SelectSubset<T, PeraturanCreateArgs<ExtArgs>>): Prisma__PeraturanClient<$Result.GetResult<Prisma.$PeraturanPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Peraturans.
     * @param {PeraturanCreateManyArgs} args - Arguments to create many Peraturans.
     * @example
     * // Create many Peraturans
     * const peraturan = await prisma.peraturan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PeraturanCreateManyArgs>(args?: SelectSubset<T, PeraturanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Peraturans and returns the data saved in the database.
     * @param {PeraturanCreateManyAndReturnArgs} args - Arguments to create many Peraturans.
     * @example
     * // Create many Peraturans
     * const peraturan = await prisma.peraturan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Peraturans and only return the `id`
     * const peraturanWithIdOnly = await prisma.peraturan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PeraturanCreateManyAndReturnArgs>(args?: SelectSubset<T, PeraturanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PeraturanPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Peraturan.
     * @param {PeraturanDeleteArgs} args - Arguments to delete one Peraturan.
     * @example
     * // Delete one Peraturan
     * const Peraturan = await prisma.peraturan.delete({
     *   where: {
     *     // ... filter to delete one Peraturan
     *   }
     * })
     * 
     */
    delete<T extends PeraturanDeleteArgs>(args: SelectSubset<T, PeraturanDeleteArgs<ExtArgs>>): Prisma__PeraturanClient<$Result.GetResult<Prisma.$PeraturanPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Peraturan.
     * @param {PeraturanUpdateArgs} args - Arguments to update one Peraturan.
     * @example
     * // Update one Peraturan
     * const peraturan = await prisma.peraturan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PeraturanUpdateArgs>(args: SelectSubset<T, PeraturanUpdateArgs<ExtArgs>>): Prisma__PeraturanClient<$Result.GetResult<Prisma.$PeraturanPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Peraturans.
     * @param {PeraturanDeleteManyArgs} args - Arguments to filter Peraturans to delete.
     * @example
     * // Delete a few Peraturans
     * const { count } = await prisma.peraturan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PeraturanDeleteManyArgs>(args?: SelectSubset<T, PeraturanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Peraturans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeraturanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Peraturans
     * const peraturan = await prisma.peraturan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PeraturanUpdateManyArgs>(args: SelectSubset<T, PeraturanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Peraturans and returns the data updated in the database.
     * @param {PeraturanUpdateManyAndReturnArgs} args - Arguments to update many Peraturans.
     * @example
     * // Update many Peraturans
     * const peraturan = await prisma.peraturan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Peraturans and only return the `id`
     * const peraturanWithIdOnly = await prisma.peraturan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PeraturanUpdateManyAndReturnArgs>(args: SelectSubset<T, PeraturanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PeraturanPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Peraturan.
     * @param {PeraturanUpsertArgs} args - Arguments to update or create a Peraturan.
     * @example
     * // Update or create a Peraturan
     * const peraturan = await prisma.peraturan.upsert({
     *   create: {
     *     // ... data to create a Peraturan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Peraturan we want to update
     *   }
     * })
     */
    upsert<T extends PeraturanUpsertArgs>(args: SelectSubset<T, PeraturanUpsertArgs<ExtArgs>>): Prisma__PeraturanClient<$Result.GetResult<Prisma.$PeraturanPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Peraturans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeraturanCountArgs} args - Arguments to filter Peraturans to count.
     * @example
     * // Count the number of Peraturans
     * const count = await prisma.peraturan.count({
     *   where: {
     *     // ... the filter for the Peraturans we want to count
     *   }
     * })
    **/
    count<T extends PeraturanCountArgs>(
      args?: Subset<T, PeraturanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PeraturanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Peraturan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeraturanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PeraturanAggregateArgs>(args: Subset<T, PeraturanAggregateArgs>): Prisma.PrismaPromise<GetPeraturanAggregateType<T>>

    /**
     * Group by Peraturan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeraturanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PeraturanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PeraturanGroupByArgs['orderBy'] }
        : { orderBy?: PeraturanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PeraturanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPeraturanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Peraturan model
   */
  readonly fields: PeraturanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Peraturan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PeraturanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Peraturan model
   */ 
  interface PeraturanFieldRefs {
    readonly id: FieldRef<"Peraturan", 'Int'>
    readonly peraturan: FieldRef<"Peraturan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Peraturan findUnique
   */
  export type PeraturanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Peraturan
     */
    select?: PeraturanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Peraturan
     */
    omit?: PeraturanOmit<ExtArgs> | null
    /**
     * Filter, which Peraturan to fetch.
     */
    where: PeraturanWhereUniqueInput
  }

  /**
   * Peraturan findUniqueOrThrow
   */
  export type PeraturanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Peraturan
     */
    select?: PeraturanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Peraturan
     */
    omit?: PeraturanOmit<ExtArgs> | null
    /**
     * Filter, which Peraturan to fetch.
     */
    where: PeraturanWhereUniqueInput
  }

  /**
   * Peraturan findFirst
   */
  export type PeraturanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Peraturan
     */
    select?: PeraturanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Peraturan
     */
    omit?: PeraturanOmit<ExtArgs> | null
    /**
     * Filter, which Peraturan to fetch.
     */
    where?: PeraturanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Peraturans to fetch.
     */
    orderBy?: PeraturanOrderByWithRelationInput | PeraturanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Peraturans.
     */
    cursor?: PeraturanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Peraturans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Peraturans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Peraturans.
     */
    distinct?: PeraturanScalarFieldEnum | PeraturanScalarFieldEnum[]
  }

  /**
   * Peraturan findFirstOrThrow
   */
  export type PeraturanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Peraturan
     */
    select?: PeraturanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Peraturan
     */
    omit?: PeraturanOmit<ExtArgs> | null
    /**
     * Filter, which Peraturan to fetch.
     */
    where?: PeraturanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Peraturans to fetch.
     */
    orderBy?: PeraturanOrderByWithRelationInput | PeraturanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Peraturans.
     */
    cursor?: PeraturanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Peraturans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Peraturans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Peraturans.
     */
    distinct?: PeraturanScalarFieldEnum | PeraturanScalarFieldEnum[]
  }

  /**
   * Peraturan findMany
   */
  export type PeraturanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Peraturan
     */
    select?: PeraturanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Peraturan
     */
    omit?: PeraturanOmit<ExtArgs> | null
    /**
     * Filter, which Peraturans to fetch.
     */
    where?: PeraturanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Peraturans to fetch.
     */
    orderBy?: PeraturanOrderByWithRelationInput | PeraturanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Peraturans.
     */
    cursor?: PeraturanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Peraturans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Peraturans.
     */
    skip?: number
    distinct?: PeraturanScalarFieldEnum | PeraturanScalarFieldEnum[]
  }

  /**
   * Peraturan create
   */
  export type PeraturanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Peraturan
     */
    select?: PeraturanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Peraturan
     */
    omit?: PeraturanOmit<ExtArgs> | null
    /**
     * The data needed to create a Peraturan.
     */
    data: XOR<PeraturanCreateInput, PeraturanUncheckedCreateInput>
  }

  /**
   * Peraturan createMany
   */
  export type PeraturanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Peraturans.
     */
    data: PeraturanCreateManyInput | PeraturanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Peraturan createManyAndReturn
   */
  export type PeraturanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Peraturan
     */
    select?: PeraturanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Peraturan
     */
    omit?: PeraturanOmit<ExtArgs> | null
    /**
     * The data used to create many Peraturans.
     */
    data: PeraturanCreateManyInput | PeraturanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Peraturan update
   */
  export type PeraturanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Peraturan
     */
    select?: PeraturanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Peraturan
     */
    omit?: PeraturanOmit<ExtArgs> | null
    /**
     * The data needed to update a Peraturan.
     */
    data: XOR<PeraturanUpdateInput, PeraturanUncheckedUpdateInput>
    /**
     * Choose, which Peraturan to update.
     */
    where: PeraturanWhereUniqueInput
  }

  /**
   * Peraturan updateMany
   */
  export type PeraturanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Peraturans.
     */
    data: XOR<PeraturanUpdateManyMutationInput, PeraturanUncheckedUpdateManyInput>
    /**
     * Filter which Peraturans to update
     */
    where?: PeraturanWhereInput
    /**
     * Limit how many Peraturans to update.
     */
    limit?: number
  }

  /**
   * Peraturan updateManyAndReturn
   */
  export type PeraturanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Peraturan
     */
    select?: PeraturanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Peraturan
     */
    omit?: PeraturanOmit<ExtArgs> | null
    /**
     * The data used to update Peraturans.
     */
    data: XOR<PeraturanUpdateManyMutationInput, PeraturanUncheckedUpdateManyInput>
    /**
     * Filter which Peraturans to update
     */
    where?: PeraturanWhereInput
    /**
     * Limit how many Peraturans to update.
     */
    limit?: number
  }

  /**
   * Peraturan upsert
   */
  export type PeraturanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Peraturan
     */
    select?: PeraturanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Peraturan
     */
    omit?: PeraturanOmit<ExtArgs> | null
    /**
     * The filter to search for the Peraturan to update in case it exists.
     */
    where: PeraturanWhereUniqueInput
    /**
     * In case the Peraturan found by the `where` argument doesn't exist, create a new Peraturan with this data.
     */
    create: XOR<PeraturanCreateInput, PeraturanUncheckedCreateInput>
    /**
     * In case the Peraturan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PeraturanUpdateInput, PeraturanUncheckedUpdateInput>
  }

  /**
   * Peraturan delete
   */
  export type PeraturanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Peraturan
     */
    select?: PeraturanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Peraturan
     */
    omit?: PeraturanOmit<ExtArgs> | null
    /**
     * Filter which Peraturan to delete.
     */
    where: PeraturanWhereUniqueInput
  }

  /**
   * Peraturan deleteMany
   */
  export type PeraturanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Peraturans to delete
     */
    where?: PeraturanWhereInput
    /**
     * Limit how many Peraturans to delete.
     */
    limit?: number
  }

  /**
   * Peraturan without action
   */
  export type PeraturanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Peraturan
     */
    select?: PeraturanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Peraturan
     */
    omit?: PeraturanOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email',
    username: 'username',
    password: 'password',
    role: 'role',
    blok_rumah: 'blok_rumah',
    tipe_rumah: 'tipe_rumah',
    isVerified: 'isVerified',
    feedback: 'feedback'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const IuranScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tanggal_iuran: 'tanggal_iuran',
    tanggal_jatuh_tempo: 'tanggal_jatuh_tempo',
    createdAt: 'createdAt',
    bukti_bayar: 'bukti_bayar',
    status_bayar: 'status_bayar',
    feedback: 'feedback'
  };

  export type IuranScalarFieldEnum = (typeof IuranScalarFieldEnum)[keyof typeof IuranScalarFieldEnum]


  export const BroadcastScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    broadcast: 'broadcast',
    tanggal_acara: 'tanggal_acara',
    status_broadcast: 'status_broadcast',
    feedback: 'feedback',
    createdAt: 'createdAt'
  };

  export type BroadcastScalarFieldEnum = (typeof BroadcastScalarFieldEnum)[keyof typeof BroadcastScalarFieldEnum]


  export const AnggotaScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    nama: 'nama',
    nik: 'nik',
    gender: 'gender',
    tempat_lahir: 'tempat_lahir',
    tanggal_lahir: 'tanggal_lahir',
    ktp: 'ktp'
  };

  export type AnggotaScalarFieldEnum = (typeof AnggotaScalarFieldEnum)[keyof typeof AnggotaScalarFieldEnum]


  export const KendalaScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    kendala: 'kendala',
    kategori: 'kategori',
    status_kendala: 'status_kendala',
    feedback: 'feedback',
    created_at: 'created_at',
    updatedAt: 'updatedAt'
  };

  export type KendalaScalarFieldEnum = (typeof KendalaScalarFieldEnum)[keyof typeof KendalaScalarFieldEnum]


  export const PeraturanScalarFieldEnum: {
    id: 'id',
    peraturan: 'peraturan'
  };

  export type PeraturanScalarFieldEnum = (typeof PeraturanScalarFieldEnum)[keyof typeof PeraturanScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'TipeRumah'
   */
  export type EnumTipeRumahFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipeRumah'>
    


  /**
   * Reference to a field of type 'TipeRumah[]'
   */
  export type ListEnumTipeRumahFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipeRumah[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'StatusBayar'
   */
  export type EnumStatusBayarFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusBayar'>
    


  /**
   * Reference to a field of type 'StatusBayar[]'
   */
  export type ListEnumStatusBayarFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusBayar[]'>
    


  /**
   * Reference to a field of type 'StatusBroadcast'
   */
  export type EnumStatusBroadcastFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusBroadcast'>
    


  /**
   * Reference to a field of type 'StatusBroadcast[]'
   */
  export type ListEnumStatusBroadcastFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusBroadcast[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'Kategori'
   */
  export type EnumKategoriFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Kategori'>
    


  /**
   * Reference to a field of type 'Kategori[]'
   */
  export type ListEnumKategoriFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Kategori[]'>
    


  /**
   * Reference to a field of type 'StatusKendala'
   */
  export type EnumStatusKendalaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusKendala'>
    


  /**
   * Reference to a field of type 'StatusKendala[]'
   */
  export type ListEnumStatusKendalaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusKendala[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    email?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    blok_rumah?: StringFilter<"User"> | string
    tipe_rumah?: EnumTipeRumahFilter<"User"> | $Enums.TipeRumah
    isVerified?: BoolFilter<"User"> | boolean
    feedback?: StringFilter<"User"> | string
    iuran?: IuranListRelationFilter
    broadcast?: BroadcastListRelationFilter
    anggota?: AnggotaListRelationFilter
    kendala?: KendalaListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    blok_rumah?: SortOrder
    tipe_rumah?: SortOrder
    isVerified?: SortOrder
    feedback?: SortOrder
    iuran?: IuranOrderByRelationAggregateInput
    broadcast?: BroadcastOrderByRelationAggregateInput
    anggota?: AnggotaOrderByRelationAggregateInput
    kendala?: KendalaOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    username?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    blok_rumah?: StringFilter<"User"> | string
    tipe_rumah?: EnumTipeRumahFilter<"User"> | $Enums.TipeRumah
    isVerified?: BoolFilter<"User"> | boolean
    feedback?: StringFilter<"User"> | string
    iuran?: IuranListRelationFilter
    broadcast?: BroadcastListRelationFilter
    anggota?: AnggotaListRelationFilter
    kendala?: KendalaListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    blok_rumah?: SortOrder
    tipe_rumah?: SortOrder
    isVerified?: SortOrder
    feedback?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    blok_rumah?: StringWithAggregatesFilter<"User"> | string
    tipe_rumah?: EnumTipeRumahWithAggregatesFilter<"User"> | $Enums.TipeRumah
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    feedback?: StringWithAggregatesFilter<"User"> | string
  }

  export type IuranWhereInput = {
    AND?: IuranWhereInput | IuranWhereInput[]
    OR?: IuranWhereInput[]
    NOT?: IuranWhereInput | IuranWhereInput[]
    id?: IntFilter<"Iuran"> | number
    userId?: IntFilter<"Iuran"> | number
    tanggal_iuran?: DateTimeFilter<"Iuran"> | Date | string
    tanggal_jatuh_tempo?: DateTimeFilter<"Iuran"> | Date | string
    createdAt?: DateTimeFilter<"Iuran"> | Date | string
    bukti_bayar?: StringFilter<"Iuran"> | string
    status_bayar?: EnumStatusBayarFilter<"Iuran"> | $Enums.StatusBayar
    feedback?: StringFilter<"Iuran"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type IuranOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tanggal_iuran?: SortOrder
    tanggal_jatuh_tempo?: SortOrder
    createdAt?: SortOrder
    bukti_bayar?: SortOrder
    status_bayar?: SortOrder
    feedback?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type IuranWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: IuranWhereInput | IuranWhereInput[]
    OR?: IuranWhereInput[]
    NOT?: IuranWhereInput | IuranWhereInput[]
    userId?: IntFilter<"Iuran"> | number
    tanggal_iuran?: DateTimeFilter<"Iuran"> | Date | string
    tanggal_jatuh_tempo?: DateTimeFilter<"Iuran"> | Date | string
    createdAt?: DateTimeFilter<"Iuran"> | Date | string
    bukti_bayar?: StringFilter<"Iuran"> | string
    status_bayar?: EnumStatusBayarFilter<"Iuran"> | $Enums.StatusBayar
    feedback?: StringFilter<"Iuran"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type IuranOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tanggal_iuran?: SortOrder
    tanggal_jatuh_tempo?: SortOrder
    createdAt?: SortOrder
    bukti_bayar?: SortOrder
    status_bayar?: SortOrder
    feedback?: SortOrder
    _count?: IuranCountOrderByAggregateInput
    _avg?: IuranAvgOrderByAggregateInput
    _max?: IuranMaxOrderByAggregateInput
    _min?: IuranMinOrderByAggregateInput
    _sum?: IuranSumOrderByAggregateInput
  }

  export type IuranScalarWhereWithAggregatesInput = {
    AND?: IuranScalarWhereWithAggregatesInput | IuranScalarWhereWithAggregatesInput[]
    OR?: IuranScalarWhereWithAggregatesInput[]
    NOT?: IuranScalarWhereWithAggregatesInput | IuranScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Iuran"> | number
    userId?: IntWithAggregatesFilter<"Iuran"> | number
    tanggal_iuran?: DateTimeWithAggregatesFilter<"Iuran"> | Date | string
    tanggal_jatuh_tempo?: DateTimeWithAggregatesFilter<"Iuran"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Iuran"> | Date | string
    bukti_bayar?: StringWithAggregatesFilter<"Iuran"> | string
    status_bayar?: EnumStatusBayarWithAggregatesFilter<"Iuran"> | $Enums.StatusBayar
    feedback?: StringWithAggregatesFilter<"Iuran"> | string
  }

  export type BroadcastWhereInput = {
    AND?: BroadcastWhereInput | BroadcastWhereInput[]
    OR?: BroadcastWhereInput[]
    NOT?: BroadcastWhereInput | BroadcastWhereInput[]
    id?: IntFilter<"Broadcast"> | number
    userId?: IntFilter<"Broadcast"> | number
    broadcast?: StringFilter<"Broadcast"> | string
    tanggal_acara?: DateTimeFilter<"Broadcast"> | Date | string
    status_broadcast?: EnumStatusBroadcastFilter<"Broadcast"> | $Enums.StatusBroadcast
    feedback?: StringFilter<"Broadcast"> | string
    createdAt?: DateTimeFilter<"Broadcast"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type BroadcastOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    broadcast?: SortOrder
    tanggal_acara?: SortOrder
    status_broadcast?: SortOrder
    feedback?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type BroadcastWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BroadcastWhereInput | BroadcastWhereInput[]
    OR?: BroadcastWhereInput[]
    NOT?: BroadcastWhereInput | BroadcastWhereInput[]
    userId?: IntFilter<"Broadcast"> | number
    broadcast?: StringFilter<"Broadcast"> | string
    tanggal_acara?: DateTimeFilter<"Broadcast"> | Date | string
    status_broadcast?: EnumStatusBroadcastFilter<"Broadcast"> | $Enums.StatusBroadcast
    feedback?: StringFilter<"Broadcast"> | string
    createdAt?: DateTimeFilter<"Broadcast"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type BroadcastOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    broadcast?: SortOrder
    tanggal_acara?: SortOrder
    status_broadcast?: SortOrder
    feedback?: SortOrder
    createdAt?: SortOrder
    _count?: BroadcastCountOrderByAggregateInput
    _avg?: BroadcastAvgOrderByAggregateInput
    _max?: BroadcastMaxOrderByAggregateInput
    _min?: BroadcastMinOrderByAggregateInput
    _sum?: BroadcastSumOrderByAggregateInput
  }

  export type BroadcastScalarWhereWithAggregatesInput = {
    AND?: BroadcastScalarWhereWithAggregatesInput | BroadcastScalarWhereWithAggregatesInput[]
    OR?: BroadcastScalarWhereWithAggregatesInput[]
    NOT?: BroadcastScalarWhereWithAggregatesInput | BroadcastScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Broadcast"> | number
    userId?: IntWithAggregatesFilter<"Broadcast"> | number
    broadcast?: StringWithAggregatesFilter<"Broadcast"> | string
    tanggal_acara?: DateTimeWithAggregatesFilter<"Broadcast"> | Date | string
    status_broadcast?: EnumStatusBroadcastWithAggregatesFilter<"Broadcast"> | $Enums.StatusBroadcast
    feedback?: StringWithAggregatesFilter<"Broadcast"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Broadcast"> | Date | string
  }

  export type AnggotaWhereInput = {
    AND?: AnggotaWhereInput | AnggotaWhereInput[]
    OR?: AnggotaWhereInput[]
    NOT?: AnggotaWhereInput | AnggotaWhereInput[]
    id?: IntFilter<"Anggota"> | number
    userId?: IntFilter<"Anggota"> | number
    nama?: StringFilter<"Anggota"> | string
    nik?: IntFilter<"Anggota"> | number
    gender?: EnumGenderFilter<"Anggota"> | $Enums.Gender
    tempat_lahir?: StringFilter<"Anggota"> | string
    tanggal_lahir?: DateTimeFilter<"Anggota"> | Date | string
    ktp?: StringFilter<"Anggota"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AnggotaOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    gender?: SortOrder
    tempat_lahir?: SortOrder
    tanggal_lahir?: SortOrder
    ktp?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AnggotaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AnggotaWhereInput | AnggotaWhereInput[]
    OR?: AnggotaWhereInput[]
    NOT?: AnggotaWhereInput | AnggotaWhereInput[]
    userId?: IntFilter<"Anggota"> | number
    nama?: StringFilter<"Anggota"> | string
    nik?: IntFilter<"Anggota"> | number
    gender?: EnumGenderFilter<"Anggota"> | $Enums.Gender
    tempat_lahir?: StringFilter<"Anggota"> | string
    tanggal_lahir?: DateTimeFilter<"Anggota"> | Date | string
    ktp?: StringFilter<"Anggota"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AnggotaOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    gender?: SortOrder
    tempat_lahir?: SortOrder
    tanggal_lahir?: SortOrder
    ktp?: SortOrder
    _count?: AnggotaCountOrderByAggregateInput
    _avg?: AnggotaAvgOrderByAggregateInput
    _max?: AnggotaMaxOrderByAggregateInput
    _min?: AnggotaMinOrderByAggregateInput
    _sum?: AnggotaSumOrderByAggregateInput
  }

  export type AnggotaScalarWhereWithAggregatesInput = {
    AND?: AnggotaScalarWhereWithAggregatesInput | AnggotaScalarWhereWithAggregatesInput[]
    OR?: AnggotaScalarWhereWithAggregatesInput[]
    NOT?: AnggotaScalarWhereWithAggregatesInput | AnggotaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Anggota"> | number
    userId?: IntWithAggregatesFilter<"Anggota"> | number
    nama?: StringWithAggregatesFilter<"Anggota"> | string
    nik?: IntWithAggregatesFilter<"Anggota"> | number
    gender?: EnumGenderWithAggregatesFilter<"Anggota"> | $Enums.Gender
    tempat_lahir?: StringWithAggregatesFilter<"Anggota"> | string
    tanggal_lahir?: DateTimeWithAggregatesFilter<"Anggota"> | Date | string
    ktp?: StringWithAggregatesFilter<"Anggota"> | string
  }

  export type KendalaWhereInput = {
    AND?: KendalaWhereInput | KendalaWhereInput[]
    OR?: KendalaWhereInput[]
    NOT?: KendalaWhereInput | KendalaWhereInput[]
    id?: IntFilter<"Kendala"> | number
    userId?: IntFilter<"Kendala"> | number
    kendala?: StringFilter<"Kendala"> | string
    kategori?: EnumKategoriFilter<"Kendala"> | $Enums.Kategori
    status_kendala?: EnumStatusKendalaFilter<"Kendala"> | $Enums.StatusKendala
    feedback?: StringFilter<"Kendala"> | string
    created_at?: DateTimeFilter<"Kendala"> | Date | string
    updatedAt?: DateTimeFilter<"Kendala"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type KendalaOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    kendala?: SortOrder
    kategori?: SortOrder
    status_kendala?: SortOrder
    feedback?: SortOrder
    created_at?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type KendalaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KendalaWhereInput | KendalaWhereInput[]
    OR?: KendalaWhereInput[]
    NOT?: KendalaWhereInput | KendalaWhereInput[]
    userId?: IntFilter<"Kendala"> | number
    kendala?: StringFilter<"Kendala"> | string
    kategori?: EnumKategoriFilter<"Kendala"> | $Enums.Kategori
    status_kendala?: EnumStatusKendalaFilter<"Kendala"> | $Enums.StatusKendala
    feedback?: StringFilter<"Kendala"> | string
    created_at?: DateTimeFilter<"Kendala"> | Date | string
    updatedAt?: DateTimeFilter<"Kendala"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type KendalaOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    kendala?: SortOrder
    kategori?: SortOrder
    status_kendala?: SortOrder
    feedback?: SortOrder
    created_at?: SortOrder
    updatedAt?: SortOrder
    _count?: KendalaCountOrderByAggregateInput
    _avg?: KendalaAvgOrderByAggregateInput
    _max?: KendalaMaxOrderByAggregateInput
    _min?: KendalaMinOrderByAggregateInput
    _sum?: KendalaSumOrderByAggregateInput
  }

  export type KendalaScalarWhereWithAggregatesInput = {
    AND?: KendalaScalarWhereWithAggregatesInput | KendalaScalarWhereWithAggregatesInput[]
    OR?: KendalaScalarWhereWithAggregatesInput[]
    NOT?: KendalaScalarWhereWithAggregatesInput | KendalaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Kendala"> | number
    userId?: IntWithAggregatesFilter<"Kendala"> | number
    kendala?: StringWithAggregatesFilter<"Kendala"> | string
    kategori?: EnumKategoriWithAggregatesFilter<"Kendala"> | $Enums.Kategori
    status_kendala?: EnumStatusKendalaWithAggregatesFilter<"Kendala"> | $Enums.StatusKendala
    feedback?: StringWithAggregatesFilter<"Kendala"> | string
    created_at?: DateTimeWithAggregatesFilter<"Kendala"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Kendala"> | Date | string
  }

  export type PeraturanWhereInput = {
    AND?: PeraturanWhereInput | PeraturanWhereInput[]
    OR?: PeraturanWhereInput[]
    NOT?: PeraturanWhereInput | PeraturanWhereInput[]
    id?: IntFilter<"Peraturan"> | number
    peraturan?: StringFilter<"Peraturan"> | string
  }

  export type PeraturanOrderByWithRelationInput = {
    id?: SortOrder
    peraturan?: SortOrder
  }

  export type PeraturanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PeraturanWhereInput | PeraturanWhereInput[]
    OR?: PeraturanWhereInput[]
    NOT?: PeraturanWhereInput | PeraturanWhereInput[]
    peraturan?: StringFilter<"Peraturan"> | string
  }, "id">

  export type PeraturanOrderByWithAggregationInput = {
    id?: SortOrder
    peraturan?: SortOrder
    _count?: PeraturanCountOrderByAggregateInput
    _avg?: PeraturanAvgOrderByAggregateInput
    _max?: PeraturanMaxOrderByAggregateInput
    _min?: PeraturanMinOrderByAggregateInput
    _sum?: PeraturanSumOrderByAggregateInput
  }

  export type PeraturanScalarWhereWithAggregatesInput = {
    AND?: PeraturanScalarWhereWithAggregatesInput | PeraturanScalarWhereWithAggregatesInput[]
    OR?: PeraturanScalarWhereWithAggregatesInput[]
    NOT?: PeraturanScalarWhereWithAggregatesInput | PeraturanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Peraturan"> | number
    peraturan?: StringWithAggregatesFilter<"Peraturan"> | string
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username?: string | null
    password: string
    role?: $Enums.Role
    blok_rumah: string
    tipe_rumah: $Enums.TipeRumah
    isVerified: boolean
    feedback: string
    iuran?: IuranCreateNestedManyWithoutUserInput
    broadcast?: BroadcastCreateNestedManyWithoutUserInput
    anggota?: AnggotaCreateNestedManyWithoutUserInput
    kendala?: KendalaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username?: string | null
    password: string
    role?: $Enums.Role
    blok_rumah: string
    tipe_rumah: $Enums.TipeRumah
    isVerified: boolean
    feedback: string
    iuran?: IuranUncheckedCreateNestedManyWithoutUserInput
    broadcast?: BroadcastUncheckedCreateNestedManyWithoutUserInput
    anggota?: AnggotaUncheckedCreateNestedManyWithoutUserInput
    kendala?: KendalaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    blok_rumah?: StringFieldUpdateOperationsInput | string
    tipe_rumah?: EnumTipeRumahFieldUpdateOperationsInput | $Enums.TipeRumah
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    feedback?: StringFieldUpdateOperationsInput | string
    iuran?: IuranUpdateManyWithoutUserNestedInput
    broadcast?: BroadcastUpdateManyWithoutUserNestedInput
    anggota?: AnggotaUpdateManyWithoutUserNestedInput
    kendala?: KendalaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    blok_rumah?: StringFieldUpdateOperationsInput | string
    tipe_rumah?: EnumTipeRumahFieldUpdateOperationsInput | $Enums.TipeRumah
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    feedback?: StringFieldUpdateOperationsInput | string
    iuran?: IuranUncheckedUpdateManyWithoutUserNestedInput
    broadcast?: BroadcastUncheckedUpdateManyWithoutUserNestedInput
    anggota?: AnggotaUncheckedUpdateManyWithoutUserNestedInput
    kendala?: KendalaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username?: string | null
    password: string
    role?: $Enums.Role
    blok_rumah: string
    tipe_rumah: $Enums.TipeRumah
    isVerified: boolean
    feedback: string
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    blok_rumah?: StringFieldUpdateOperationsInput | string
    tipe_rumah?: EnumTipeRumahFieldUpdateOperationsInput | $Enums.TipeRumah
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    blok_rumah?: StringFieldUpdateOperationsInput | string
    tipe_rumah?: EnumTipeRumahFieldUpdateOperationsInput | $Enums.TipeRumah
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type IuranCreateInput = {
    tanggal_iuran: Date | string
    tanggal_jatuh_tempo: Date | string
    createdAt?: Date | string
    bukti_bayar: string
    status_bayar: $Enums.StatusBayar
    feedback: string
    user: UserCreateNestedOneWithoutIuranInput
  }

  export type IuranUncheckedCreateInput = {
    id?: number
    userId: number
    tanggal_iuran: Date | string
    tanggal_jatuh_tempo: Date | string
    createdAt?: Date | string
    bukti_bayar: string
    status_bayar: $Enums.StatusBayar
    feedback: string
  }

  export type IuranUpdateInput = {
    tanggal_iuran?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_jatuh_tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bukti_bayar?: StringFieldUpdateOperationsInput | string
    status_bayar?: EnumStatusBayarFieldUpdateOperationsInput | $Enums.StatusBayar
    feedback?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutIuranNestedInput
  }

  export type IuranUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    tanggal_iuran?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_jatuh_tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bukti_bayar?: StringFieldUpdateOperationsInput | string
    status_bayar?: EnumStatusBayarFieldUpdateOperationsInput | $Enums.StatusBayar
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type IuranCreateManyInput = {
    id?: number
    userId: number
    tanggal_iuran: Date | string
    tanggal_jatuh_tempo: Date | string
    createdAt?: Date | string
    bukti_bayar: string
    status_bayar: $Enums.StatusBayar
    feedback: string
  }

  export type IuranUpdateManyMutationInput = {
    tanggal_iuran?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_jatuh_tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bukti_bayar?: StringFieldUpdateOperationsInput | string
    status_bayar?: EnumStatusBayarFieldUpdateOperationsInput | $Enums.StatusBayar
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type IuranUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    tanggal_iuran?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_jatuh_tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bukti_bayar?: StringFieldUpdateOperationsInput | string
    status_bayar?: EnumStatusBayarFieldUpdateOperationsInput | $Enums.StatusBayar
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type BroadcastCreateInput = {
    broadcast: string
    tanggal_acara: Date | string
    status_broadcast?: $Enums.StatusBroadcast
    feedback: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBroadcastInput
  }

  export type BroadcastUncheckedCreateInput = {
    id?: number
    userId: number
    broadcast: string
    tanggal_acara: Date | string
    status_broadcast?: $Enums.StatusBroadcast
    feedback: string
    createdAt?: Date | string
  }

  export type BroadcastUpdateInput = {
    broadcast?: StringFieldUpdateOperationsInput | string
    tanggal_acara?: DateTimeFieldUpdateOperationsInput | Date | string
    status_broadcast?: EnumStatusBroadcastFieldUpdateOperationsInput | $Enums.StatusBroadcast
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBroadcastNestedInput
  }

  export type BroadcastUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    broadcast?: StringFieldUpdateOperationsInput | string
    tanggal_acara?: DateTimeFieldUpdateOperationsInput | Date | string
    status_broadcast?: EnumStatusBroadcastFieldUpdateOperationsInput | $Enums.StatusBroadcast
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BroadcastCreateManyInput = {
    id?: number
    userId: number
    broadcast: string
    tanggal_acara: Date | string
    status_broadcast?: $Enums.StatusBroadcast
    feedback: string
    createdAt?: Date | string
  }

  export type BroadcastUpdateManyMutationInput = {
    broadcast?: StringFieldUpdateOperationsInput | string
    tanggal_acara?: DateTimeFieldUpdateOperationsInput | Date | string
    status_broadcast?: EnumStatusBroadcastFieldUpdateOperationsInput | $Enums.StatusBroadcast
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BroadcastUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    broadcast?: StringFieldUpdateOperationsInput | string
    tanggal_acara?: DateTimeFieldUpdateOperationsInput | Date | string
    status_broadcast?: EnumStatusBroadcastFieldUpdateOperationsInput | $Enums.StatusBroadcast
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnggotaCreateInput = {
    nama: string
    nik: number
    gender: $Enums.Gender
    tempat_lahir: string
    tanggal_lahir: Date | string
    ktp: string
    user: UserCreateNestedOneWithoutAnggotaInput
  }

  export type AnggotaUncheckedCreateInput = {
    id?: number
    userId: number
    nama: string
    nik: number
    gender: $Enums.Gender
    tempat_lahir: string
    tanggal_lahir: Date | string
    ktp: string
  }

  export type AnggotaUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nik?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    tempat_lahir?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    ktp?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAnggotaNestedInput
  }

  export type AnggotaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nik?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    tempat_lahir?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    ktp?: StringFieldUpdateOperationsInput | string
  }

  export type AnggotaCreateManyInput = {
    id?: number
    userId: number
    nama: string
    nik: number
    gender: $Enums.Gender
    tempat_lahir: string
    tanggal_lahir: Date | string
    ktp: string
  }

  export type AnggotaUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nik?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    tempat_lahir?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    ktp?: StringFieldUpdateOperationsInput | string
  }

  export type AnggotaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nik?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    tempat_lahir?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    ktp?: StringFieldUpdateOperationsInput | string
  }

  export type KendalaCreateInput = {
    kendala: string
    kategori: $Enums.Kategori
    status_kendala: $Enums.StatusKendala
    feedback: string
    created_at?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutKendalaInput
  }

  export type KendalaUncheckedCreateInput = {
    id?: number
    userId: number
    kendala: string
    kategori: $Enums.Kategori
    status_kendala: $Enums.StatusKendala
    feedback: string
    created_at?: Date | string
    updatedAt?: Date | string
  }

  export type KendalaUpdateInput = {
    kendala?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriFieldUpdateOperationsInput | $Enums.Kategori
    status_kendala?: EnumStatusKendalaFieldUpdateOperationsInput | $Enums.StatusKendala
    feedback?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutKendalaNestedInput
  }

  export type KendalaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    kendala?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriFieldUpdateOperationsInput | $Enums.Kategori
    status_kendala?: EnumStatusKendalaFieldUpdateOperationsInput | $Enums.StatusKendala
    feedback?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KendalaCreateManyInput = {
    id?: number
    userId: number
    kendala: string
    kategori: $Enums.Kategori
    status_kendala: $Enums.StatusKendala
    feedback: string
    created_at?: Date | string
    updatedAt?: Date | string
  }

  export type KendalaUpdateManyMutationInput = {
    kendala?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriFieldUpdateOperationsInput | $Enums.Kategori
    status_kendala?: EnumStatusKendalaFieldUpdateOperationsInput | $Enums.StatusKendala
    feedback?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KendalaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    kendala?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriFieldUpdateOperationsInput | $Enums.Kategori
    status_kendala?: EnumStatusKendalaFieldUpdateOperationsInput | $Enums.StatusKendala
    feedback?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PeraturanCreateInput = {
    peraturan: string
  }

  export type PeraturanUncheckedCreateInput = {
    id?: number
    peraturan: string
  }

  export type PeraturanUpdateInput = {
    peraturan?: StringFieldUpdateOperationsInput | string
  }

  export type PeraturanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    peraturan?: StringFieldUpdateOperationsInput | string
  }

  export type PeraturanCreateManyInput = {
    id?: number
    peraturan: string
  }

  export type PeraturanUpdateManyMutationInput = {
    peraturan?: StringFieldUpdateOperationsInput | string
  }

  export type PeraturanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    peraturan?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type EnumTipeRumahFilter<$PrismaModel = never> = {
    equals?: $Enums.TipeRumah | EnumTipeRumahFieldRefInput<$PrismaModel>
    in?: $Enums.TipeRumah[] | ListEnumTipeRumahFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipeRumah[] | ListEnumTipeRumahFieldRefInput<$PrismaModel>
    not?: NestedEnumTipeRumahFilter<$PrismaModel> | $Enums.TipeRumah
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IuranListRelationFilter = {
    every?: IuranWhereInput
    some?: IuranWhereInput
    none?: IuranWhereInput
  }

  export type BroadcastListRelationFilter = {
    every?: BroadcastWhereInput
    some?: BroadcastWhereInput
    none?: BroadcastWhereInput
  }

  export type AnggotaListRelationFilter = {
    every?: AnggotaWhereInput
    some?: AnggotaWhereInput
    none?: AnggotaWhereInput
  }

  export type KendalaListRelationFilter = {
    every?: KendalaWhereInput
    some?: KendalaWhereInput
    none?: KendalaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type IuranOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BroadcastOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnggotaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KendalaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    blok_rumah?: SortOrder
    tipe_rumah?: SortOrder
    isVerified?: SortOrder
    feedback?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    blok_rumah?: SortOrder
    tipe_rumah?: SortOrder
    isVerified?: SortOrder
    feedback?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    blok_rumah?: SortOrder
    tipe_rumah?: SortOrder
    isVerified?: SortOrder
    feedback?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumTipeRumahWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipeRumah | EnumTipeRumahFieldRefInput<$PrismaModel>
    in?: $Enums.TipeRumah[] | ListEnumTipeRumahFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipeRumah[] | ListEnumTipeRumahFieldRefInput<$PrismaModel>
    not?: NestedEnumTipeRumahWithAggregatesFilter<$PrismaModel> | $Enums.TipeRumah
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipeRumahFilter<$PrismaModel>
    _max?: NestedEnumTipeRumahFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumStatusBayarFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusBayar | EnumStatusBayarFieldRefInput<$PrismaModel>
    in?: $Enums.StatusBayar[] | ListEnumStatusBayarFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusBayar[] | ListEnumStatusBayarFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusBayarFilter<$PrismaModel> | $Enums.StatusBayar
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type IuranCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tanggal_iuran?: SortOrder
    tanggal_jatuh_tempo?: SortOrder
    createdAt?: SortOrder
    bukti_bayar?: SortOrder
    status_bayar?: SortOrder
    feedback?: SortOrder
  }

  export type IuranAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IuranMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tanggal_iuran?: SortOrder
    tanggal_jatuh_tempo?: SortOrder
    createdAt?: SortOrder
    bukti_bayar?: SortOrder
    status_bayar?: SortOrder
    feedback?: SortOrder
  }

  export type IuranMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tanggal_iuran?: SortOrder
    tanggal_jatuh_tempo?: SortOrder
    createdAt?: SortOrder
    bukti_bayar?: SortOrder
    status_bayar?: SortOrder
    feedback?: SortOrder
  }

  export type IuranSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumStatusBayarWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusBayar | EnumStatusBayarFieldRefInput<$PrismaModel>
    in?: $Enums.StatusBayar[] | ListEnumStatusBayarFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusBayar[] | ListEnumStatusBayarFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusBayarWithAggregatesFilter<$PrismaModel> | $Enums.StatusBayar
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusBayarFilter<$PrismaModel>
    _max?: NestedEnumStatusBayarFilter<$PrismaModel>
  }

  export type EnumStatusBroadcastFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusBroadcast | EnumStatusBroadcastFieldRefInput<$PrismaModel>
    in?: $Enums.StatusBroadcast[] | ListEnumStatusBroadcastFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusBroadcast[] | ListEnumStatusBroadcastFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusBroadcastFilter<$PrismaModel> | $Enums.StatusBroadcast
  }

  export type BroadcastCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    broadcast?: SortOrder
    tanggal_acara?: SortOrder
    status_broadcast?: SortOrder
    feedback?: SortOrder
    createdAt?: SortOrder
  }

  export type BroadcastAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BroadcastMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    broadcast?: SortOrder
    tanggal_acara?: SortOrder
    status_broadcast?: SortOrder
    feedback?: SortOrder
    createdAt?: SortOrder
  }

  export type BroadcastMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    broadcast?: SortOrder
    tanggal_acara?: SortOrder
    status_broadcast?: SortOrder
    feedback?: SortOrder
    createdAt?: SortOrder
  }

  export type BroadcastSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumStatusBroadcastWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusBroadcast | EnumStatusBroadcastFieldRefInput<$PrismaModel>
    in?: $Enums.StatusBroadcast[] | ListEnumStatusBroadcastFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusBroadcast[] | ListEnumStatusBroadcastFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusBroadcastWithAggregatesFilter<$PrismaModel> | $Enums.StatusBroadcast
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusBroadcastFilter<$PrismaModel>
    _max?: NestedEnumStatusBroadcastFilter<$PrismaModel>
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type AnggotaCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    gender?: SortOrder
    tempat_lahir?: SortOrder
    tanggal_lahir?: SortOrder
    ktp?: SortOrder
  }

  export type AnggotaAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nik?: SortOrder
  }

  export type AnggotaMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    gender?: SortOrder
    tempat_lahir?: SortOrder
    tanggal_lahir?: SortOrder
    ktp?: SortOrder
  }

  export type AnggotaMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    gender?: SortOrder
    tempat_lahir?: SortOrder
    tanggal_lahir?: SortOrder
    ktp?: SortOrder
  }

  export type AnggotaSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nik?: SortOrder
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type EnumKategoriFilter<$PrismaModel = never> = {
    equals?: $Enums.Kategori | EnumKategoriFieldRefInput<$PrismaModel>
    in?: $Enums.Kategori[] | ListEnumKategoriFieldRefInput<$PrismaModel>
    notIn?: $Enums.Kategori[] | ListEnumKategoriFieldRefInput<$PrismaModel>
    not?: NestedEnumKategoriFilter<$PrismaModel> | $Enums.Kategori
  }

  export type EnumStatusKendalaFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusKendala | EnumStatusKendalaFieldRefInput<$PrismaModel>
    in?: $Enums.StatusKendala[] | ListEnumStatusKendalaFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusKendala[] | ListEnumStatusKendalaFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusKendalaFilter<$PrismaModel> | $Enums.StatusKendala
  }

  export type KendalaCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    kendala?: SortOrder
    kategori?: SortOrder
    status_kendala?: SortOrder
    feedback?: SortOrder
    created_at?: SortOrder
    updatedAt?: SortOrder
  }

  export type KendalaAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type KendalaMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    kendala?: SortOrder
    kategori?: SortOrder
    status_kendala?: SortOrder
    feedback?: SortOrder
    created_at?: SortOrder
    updatedAt?: SortOrder
  }

  export type KendalaMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    kendala?: SortOrder
    kategori?: SortOrder
    status_kendala?: SortOrder
    feedback?: SortOrder
    created_at?: SortOrder
    updatedAt?: SortOrder
  }

  export type KendalaSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumKategoriWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Kategori | EnumKategoriFieldRefInput<$PrismaModel>
    in?: $Enums.Kategori[] | ListEnumKategoriFieldRefInput<$PrismaModel>
    notIn?: $Enums.Kategori[] | ListEnumKategoriFieldRefInput<$PrismaModel>
    not?: NestedEnumKategoriWithAggregatesFilter<$PrismaModel> | $Enums.Kategori
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKategoriFilter<$PrismaModel>
    _max?: NestedEnumKategoriFilter<$PrismaModel>
  }

  export type EnumStatusKendalaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusKendala | EnumStatusKendalaFieldRefInput<$PrismaModel>
    in?: $Enums.StatusKendala[] | ListEnumStatusKendalaFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusKendala[] | ListEnumStatusKendalaFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusKendalaWithAggregatesFilter<$PrismaModel> | $Enums.StatusKendala
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusKendalaFilter<$PrismaModel>
    _max?: NestedEnumStatusKendalaFilter<$PrismaModel>
  }

  export type PeraturanCountOrderByAggregateInput = {
    id?: SortOrder
    peraturan?: SortOrder
  }

  export type PeraturanAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PeraturanMaxOrderByAggregateInput = {
    id?: SortOrder
    peraturan?: SortOrder
  }

  export type PeraturanMinOrderByAggregateInput = {
    id?: SortOrder
    peraturan?: SortOrder
  }

  export type PeraturanSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IuranCreateNestedManyWithoutUserInput = {
    create?: XOR<IuranCreateWithoutUserInput, IuranUncheckedCreateWithoutUserInput> | IuranCreateWithoutUserInput[] | IuranUncheckedCreateWithoutUserInput[]
    connectOrCreate?: IuranCreateOrConnectWithoutUserInput | IuranCreateOrConnectWithoutUserInput[]
    createMany?: IuranCreateManyUserInputEnvelope
    connect?: IuranWhereUniqueInput | IuranWhereUniqueInput[]
  }

  export type BroadcastCreateNestedManyWithoutUserInput = {
    create?: XOR<BroadcastCreateWithoutUserInput, BroadcastUncheckedCreateWithoutUserInput> | BroadcastCreateWithoutUserInput[] | BroadcastUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BroadcastCreateOrConnectWithoutUserInput | BroadcastCreateOrConnectWithoutUserInput[]
    createMany?: BroadcastCreateManyUserInputEnvelope
    connect?: BroadcastWhereUniqueInput | BroadcastWhereUniqueInput[]
  }

  export type AnggotaCreateNestedManyWithoutUserInput = {
    create?: XOR<AnggotaCreateWithoutUserInput, AnggotaUncheckedCreateWithoutUserInput> | AnggotaCreateWithoutUserInput[] | AnggotaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnggotaCreateOrConnectWithoutUserInput | AnggotaCreateOrConnectWithoutUserInput[]
    createMany?: AnggotaCreateManyUserInputEnvelope
    connect?: AnggotaWhereUniqueInput | AnggotaWhereUniqueInput[]
  }

  export type KendalaCreateNestedManyWithoutUserInput = {
    create?: XOR<KendalaCreateWithoutUserInput, KendalaUncheckedCreateWithoutUserInput> | KendalaCreateWithoutUserInput[] | KendalaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: KendalaCreateOrConnectWithoutUserInput | KendalaCreateOrConnectWithoutUserInput[]
    createMany?: KendalaCreateManyUserInputEnvelope
    connect?: KendalaWhereUniqueInput | KendalaWhereUniqueInput[]
  }

  export type IuranUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<IuranCreateWithoutUserInput, IuranUncheckedCreateWithoutUserInput> | IuranCreateWithoutUserInput[] | IuranUncheckedCreateWithoutUserInput[]
    connectOrCreate?: IuranCreateOrConnectWithoutUserInput | IuranCreateOrConnectWithoutUserInput[]
    createMany?: IuranCreateManyUserInputEnvelope
    connect?: IuranWhereUniqueInput | IuranWhereUniqueInput[]
  }

  export type BroadcastUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BroadcastCreateWithoutUserInput, BroadcastUncheckedCreateWithoutUserInput> | BroadcastCreateWithoutUserInput[] | BroadcastUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BroadcastCreateOrConnectWithoutUserInput | BroadcastCreateOrConnectWithoutUserInput[]
    createMany?: BroadcastCreateManyUserInputEnvelope
    connect?: BroadcastWhereUniqueInput | BroadcastWhereUniqueInput[]
  }

  export type AnggotaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AnggotaCreateWithoutUserInput, AnggotaUncheckedCreateWithoutUserInput> | AnggotaCreateWithoutUserInput[] | AnggotaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnggotaCreateOrConnectWithoutUserInput | AnggotaCreateOrConnectWithoutUserInput[]
    createMany?: AnggotaCreateManyUserInputEnvelope
    connect?: AnggotaWhereUniqueInput | AnggotaWhereUniqueInput[]
  }

  export type KendalaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<KendalaCreateWithoutUserInput, KendalaUncheckedCreateWithoutUserInput> | KendalaCreateWithoutUserInput[] | KendalaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: KendalaCreateOrConnectWithoutUserInput | KendalaCreateOrConnectWithoutUserInput[]
    createMany?: KendalaCreateManyUserInputEnvelope
    connect?: KendalaWhereUniqueInput | KendalaWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type EnumTipeRumahFieldUpdateOperationsInput = {
    set?: $Enums.TipeRumah
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IuranUpdateManyWithoutUserNestedInput = {
    create?: XOR<IuranCreateWithoutUserInput, IuranUncheckedCreateWithoutUserInput> | IuranCreateWithoutUserInput[] | IuranUncheckedCreateWithoutUserInput[]
    connectOrCreate?: IuranCreateOrConnectWithoutUserInput | IuranCreateOrConnectWithoutUserInput[]
    upsert?: IuranUpsertWithWhereUniqueWithoutUserInput | IuranUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: IuranCreateManyUserInputEnvelope
    set?: IuranWhereUniqueInput | IuranWhereUniqueInput[]
    disconnect?: IuranWhereUniqueInput | IuranWhereUniqueInput[]
    delete?: IuranWhereUniqueInput | IuranWhereUniqueInput[]
    connect?: IuranWhereUniqueInput | IuranWhereUniqueInput[]
    update?: IuranUpdateWithWhereUniqueWithoutUserInput | IuranUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: IuranUpdateManyWithWhereWithoutUserInput | IuranUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: IuranScalarWhereInput | IuranScalarWhereInput[]
  }

  export type BroadcastUpdateManyWithoutUserNestedInput = {
    create?: XOR<BroadcastCreateWithoutUserInput, BroadcastUncheckedCreateWithoutUserInput> | BroadcastCreateWithoutUserInput[] | BroadcastUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BroadcastCreateOrConnectWithoutUserInput | BroadcastCreateOrConnectWithoutUserInput[]
    upsert?: BroadcastUpsertWithWhereUniqueWithoutUserInput | BroadcastUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BroadcastCreateManyUserInputEnvelope
    set?: BroadcastWhereUniqueInput | BroadcastWhereUniqueInput[]
    disconnect?: BroadcastWhereUniqueInput | BroadcastWhereUniqueInput[]
    delete?: BroadcastWhereUniqueInput | BroadcastWhereUniqueInput[]
    connect?: BroadcastWhereUniqueInput | BroadcastWhereUniqueInput[]
    update?: BroadcastUpdateWithWhereUniqueWithoutUserInput | BroadcastUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BroadcastUpdateManyWithWhereWithoutUserInput | BroadcastUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BroadcastScalarWhereInput | BroadcastScalarWhereInput[]
  }

  export type AnggotaUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnggotaCreateWithoutUserInput, AnggotaUncheckedCreateWithoutUserInput> | AnggotaCreateWithoutUserInput[] | AnggotaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnggotaCreateOrConnectWithoutUserInput | AnggotaCreateOrConnectWithoutUserInput[]
    upsert?: AnggotaUpsertWithWhereUniqueWithoutUserInput | AnggotaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnggotaCreateManyUserInputEnvelope
    set?: AnggotaWhereUniqueInput | AnggotaWhereUniqueInput[]
    disconnect?: AnggotaWhereUniqueInput | AnggotaWhereUniqueInput[]
    delete?: AnggotaWhereUniqueInput | AnggotaWhereUniqueInput[]
    connect?: AnggotaWhereUniqueInput | AnggotaWhereUniqueInput[]
    update?: AnggotaUpdateWithWhereUniqueWithoutUserInput | AnggotaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnggotaUpdateManyWithWhereWithoutUserInput | AnggotaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnggotaScalarWhereInput | AnggotaScalarWhereInput[]
  }

  export type KendalaUpdateManyWithoutUserNestedInput = {
    create?: XOR<KendalaCreateWithoutUserInput, KendalaUncheckedCreateWithoutUserInput> | KendalaCreateWithoutUserInput[] | KendalaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: KendalaCreateOrConnectWithoutUserInput | KendalaCreateOrConnectWithoutUserInput[]
    upsert?: KendalaUpsertWithWhereUniqueWithoutUserInput | KendalaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: KendalaCreateManyUserInputEnvelope
    set?: KendalaWhereUniqueInput | KendalaWhereUniqueInput[]
    disconnect?: KendalaWhereUniqueInput | KendalaWhereUniqueInput[]
    delete?: KendalaWhereUniqueInput | KendalaWhereUniqueInput[]
    connect?: KendalaWhereUniqueInput | KendalaWhereUniqueInput[]
    update?: KendalaUpdateWithWhereUniqueWithoutUserInput | KendalaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: KendalaUpdateManyWithWhereWithoutUserInput | KendalaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: KendalaScalarWhereInput | KendalaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IuranUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<IuranCreateWithoutUserInput, IuranUncheckedCreateWithoutUserInput> | IuranCreateWithoutUserInput[] | IuranUncheckedCreateWithoutUserInput[]
    connectOrCreate?: IuranCreateOrConnectWithoutUserInput | IuranCreateOrConnectWithoutUserInput[]
    upsert?: IuranUpsertWithWhereUniqueWithoutUserInput | IuranUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: IuranCreateManyUserInputEnvelope
    set?: IuranWhereUniqueInput | IuranWhereUniqueInput[]
    disconnect?: IuranWhereUniqueInput | IuranWhereUniqueInput[]
    delete?: IuranWhereUniqueInput | IuranWhereUniqueInput[]
    connect?: IuranWhereUniqueInput | IuranWhereUniqueInput[]
    update?: IuranUpdateWithWhereUniqueWithoutUserInput | IuranUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: IuranUpdateManyWithWhereWithoutUserInput | IuranUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: IuranScalarWhereInput | IuranScalarWhereInput[]
  }

  export type BroadcastUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BroadcastCreateWithoutUserInput, BroadcastUncheckedCreateWithoutUserInput> | BroadcastCreateWithoutUserInput[] | BroadcastUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BroadcastCreateOrConnectWithoutUserInput | BroadcastCreateOrConnectWithoutUserInput[]
    upsert?: BroadcastUpsertWithWhereUniqueWithoutUserInput | BroadcastUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BroadcastCreateManyUserInputEnvelope
    set?: BroadcastWhereUniqueInput | BroadcastWhereUniqueInput[]
    disconnect?: BroadcastWhereUniqueInput | BroadcastWhereUniqueInput[]
    delete?: BroadcastWhereUniqueInput | BroadcastWhereUniqueInput[]
    connect?: BroadcastWhereUniqueInput | BroadcastWhereUniqueInput[]
    update?: BroadcastUpdateWithWhereUniqueWithoutUserInput | BroadcastUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BroadcastUpdateManyWithWhereWithoutUserInput | BroadcastUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BroadcastScalarWhereInput | BroadcastScalarWhereInput[]
  }

  export type AnggotaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnggotaCreateWithoutUserInput, AnggotaUncheckedCreateWithoutUserInput> | AnggotaCreateWithoutUserInput[] | AnggotaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnggotaCreateOrConnectWithoutUserInput | AnggotaCreateOrConnectWithoutUserInput[]
    upsert?: AnggotaUpsertWithWhereUniqueWithoutUserInput | AnggotaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnggotaCreateManyUserInputEnvelope
    set?: AnggotaWhereUniqueInput | AnggotaWhereUniqueInput[]
    disconnect?: AnggotaWhereUniqueInput | AnggotaWhereUniqueInput[]
    delete?: AnggotaWhereUniqueInput | AnggotaWhereUniqueInput[]
    connect?: AnggotaWhereUniqueInput | AnggotaWhereUniqueInput[]
    update?: AnggotaUpdateWithWhereUniqueWithoutUserInput | AnggotaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnggotaUpdateManyWithWhereWithoutUserInput | AnggotaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnggotaScalarWhereInput | AnggotaScalarWhereInput[]
  }

  export type KendalaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<KendalaCreateWithoutUserInput, KendalaUncheckedCreateWithoutUserInput> | KendalaCreateWithoutUserInput[] | KendalaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: KendalaCreateOrConnectWithoutUserInput | KendalaCreateOrConnectWithoutUserInput[]
    upsert?: KendalaUpsertWithWhereUniqueWithoutUserInput | KendalaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: KendalaCreateManyUserInputEnvelope
    set?: KendalaWhereUniqueInput | KendalaWhereUniqueInput[]
    disconnect?: KendalaWhereUniqueInput | KendalaWhereUniqueInput[]
    delete?: KendalaWhereUniqueInput | KendalaWhereUniqueInput[]
    connect?: KendalaWhereUniqueInput | KendalaWhereUniqueInput[]
    update?: KendalaUpdateWithWhereUniqueWithoutUserInput | KendalaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: KendalaUpdateManyWithWhereWithoutUserInput | KendalaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: KendalaScalarWhereInput | KendalaScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutIuranInput = {
    create?: XOR<UserCreateWithoutIuranInput, UserUncheckedCreateWithoutIuranInput>
    connectOrCreate?: UserCreateOrConnectWithoutIuranInput
    connect?: UserWhereUniqueInput
  }

  export type EnumStatusBayarFieldUpdateOperationsInput = {
    set?: $Enums.StatusBayar
  }

  export type UserUpdateOneRequiredWithoutIuranNestedInput = {
    create?: XOR<UserCreateWithoutIuranInput, UserUncheckedCreateWithoutIuranInput>
    connectOrCreate?: UserCreateOrConnectWithoutIuranInput
    upsert?: UserUpsertWithoutIuranInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutIuranInput, UserUpdateWithoutIuranInput>, UserUncheckedUpdateWithoutIuranInput>
  }

  export type UserCreateNestedOneWithoutBroadcastInput = {
    create?: XOR<UserCreateWithoutBroadcastInput, UserUncheckedCreateWithoutBroadcastInput>
    connectOrCreate?: UserCreateOrConnectWithoutBroadcastInput
    connect?: UserWhereUniqueInput
  }

  export type EnumStatusBroadcastFieldUpdateOperationsInput = {
    set?: $Enums.StatusBroadcast
  }

  export type UserUpdateOneRequiredWithoutBroadcastNestedInput = {
    create?: XOR<UserCreateWithoutBroadcastInput, UserUncheckedCreateWithoutBroadcastInput>
    connectOrCreate?: UserCreateOrConnectWithoutBroadcastInput
    upsert?: UserUpsertWithoutBroadcastInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBroadcastInput, UserUpdateWithoutBroadcastInput>, UserUncheckedUpdateWithoutBroadcastInput>
  }

  export type UserCreateNestedOneWithoutAnggotaInput = {
    create?: XOR<UserCreateWithoutAnggotaInput, UserUncheckedCreateWithoutAnggotaInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnggotaInput
    connect?: UserWhereUniqueInput
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type UserUpdateOneRequiredWithoutAnggotaNestedInput = {
    create?: XOR<UserCreateWithoutAnggotaInput, UserUncheckedCreateWithoutAnggotaInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnggotaInput
    upsert?: UserUpsertWithoutAnggotaInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnggotaInput, UserUpdateWithoutAnggotaInput>, UserUncheckedUpdateWithoutAnggotaInput>
  }

  export type UserCreateNestedOneWithoutKendalaInput = {
    create?: XOR<UserCreateWithoutKendalaInput, UserUncheckedCreateWithoutKendalaInput>
    connectOrCreate?: UserCreateOrConnectWithoutKendalaInput
    connect?: UserWhereUniqueInput
  }

  export type EnumKategoriFieldUpdateOperationsInput = {
    set?: $Enums.Kategori
  }

  export type EnumStatusKendalaFieldUpdateOperationsInput = {
    set?: $Enums.StatusKendala
  }

  export type UserUpdateOneRequiredWithoutKendalaNestedInput = {
    create?: XOR<UserCreateWithoutKendalaInput, UserUncheckedCreateWithoutKendalaInput>
    connectOrCreate?: UserCreateOrConnectWithoutKendalaInput
    upsert?: UserUpsertWithoutKendalaInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutKendalaInput, UserUpdateWithoutKendalaInput>, UserUncheckedUpdateWithoutKendalaInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumTipeRumahFilter<$PrismaModel = never> = {
    equals?: $Enums.TipeRumah | EnumTipeRumahFieldRefInput<$PrismaModel>
    in?: $Enums.TipeRumah[] | ListEnumTipeRumahFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipeRumah[] | ListEnumTipeRumahFieldRefInput<$PrismaModel>
    not?: NestedEnumTipeRumahFilter<$PrismaModel> | $Enums.TipeRumah
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumTipeRumahWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipeRumah | EnumTipeRumahFieldRefInput<$PrismaModel>
    in?: $Enums.TipeRumah[] | ListEnumTipeRumahFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipeRumah[] | ListEnumTipeRumahFieldRefInput<$PrismaModel>
    not?: NestedEnumTipeRumahWithAggregatesFilter<$PrismaModel> | $Enums.TipeRumah
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipeRumahFilter<$PrismaModel>
    _max?: NestedEnumTipeRumahFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumStatusBayarFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusBayar | EnumStatusBayarFieldRefInput<$PrismaModel>
    in?: $Enums.StatusBayar[] | ListEnumStatusBayarFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusBayar[] | ListEnumStatusBayarFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusBayarFilter<$PrismaModel> | $Enums.StatusBayar
  }

  export type NestedEnumStatusBayarWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusBayar | EnumStatusBayarFieldRefInput<$PrismaModel>
    in?: $Enums.StatusBayar[] | ListEnumStatusBayarFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusBayar[] | ListEnumStatusBayarFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusBayarWithAggregatesFilter<$PrismaModel> | $Enums.StatusBayar
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusBayarFilter<$PrismaModel>
    _max?: NestedEnumStatusBayarFilter<$PrismaModel>
  }

  export type NestedEnumStatusBroadcastFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusBroadcast | EnumStatusBroadcastFieldRefInput<$PrismaModel>
    in?: $Enums.StatusBroadcast[] | ListEnumStatusBroadcastFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusBroadcast[] | ListEnumStatusBroadcastFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusBroadcastFilter<$PrismaModel> | $Enums.StatusBroadcast
  }

  export type NestedEnumStatusBroadcastWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusBroadcast | EnumStatusBroadcastFieldRefInput<$PrismaModel>
    in?: $Enums.StatusBroadcast[] | ListEnumStatusBroadcastFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusBroadcast[] | ListEnumStatusBroadcastFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusBroadcastWithAggregatesFilter<$PrismaModel> | $Enums.StatusBroadcast
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusBroadcastFilter<$PrismaModel>
    _max?: NestedEnumStatusBroadcastFilter<$PrismaModel>
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedEnumKategoriFilter<$PrismaModel = never> = {
    equals?: $Enums.Kategori | EnumKategoriFieldRefInput<$PrismaModel>
    in?: $Enums.Kategori[] | ListEnumKategoriFieldRefInput<$PrismaModel>
    notIn?: $Enums.Kategori[] | ListEnumKategoriFieldRefInput<$PrismaModel>
    not?: NestedEnumKategoriFilter<$PrismaModel> | $Enums.Kategori
  }

  export type NestedEnumStatusKendalaFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusKendala | EnumStatusKendalaFieldRefInput<$PrismaModel>
    in?: $Enums.StatusKendala[] | ListEnumStatusKendalaFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusKendala[] | ListEnumStatusKendalaFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusKendalaFilter<$PrismaModel> | $Enums.StatusKendala
  }

  export type NestedEnumKategoriWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Kategori | EnumKategoriFieldRefInput<$PrismaModel>
    in?: $Enums.Kategori[] | ListEnumKategoriFieldRefInput<$PrismaModel>
    notIn?: $Enums.Kategori[] | ListEnumKategoriFieldRefInput<$PrismaModel>
    not?: NestedEnumKategoriWithAggregatesFilter<$PrismaModel> | $Enums.Kategori
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKategoriFilter<$PrismaModel>
    _max?: NestedEnumKategoriFilter<$PrismaModel>
  }

  export type NestedEnumStatusKendalaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusKendala | EnumStatusKendalaFieldRefInput<$PrismaModel>
    in?: $Enums.StatusKendala[] | ListEnumStatusKendalaFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusKendala[] | ListEnumStatusKendalaFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusKendalaWithAggregatesFilter<$PrismaModel> | $Enums.StatusKendala
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusKendalaFilter<$PrismaModel>
    _max?: NestedEnumStatusKendalaFilter<$PrismaModel>
  }

  export type IuranCreateWithoutUserInput = {
    tanggal_iuran: Date | string
    tanggal_jatuh_tempo: Date | string
    createdAt?: Date | string
    bukti_bayar: string
    status_bayar: $Enums.StatusBayar
    feedback: string
  }

  export type IuranUncheckedCreateWithoutUserInput = {
    id?: number
    tanggal_iuran: Date | string
    tanggal_jatuh_tempo: Date | string
    createdAt?: Date | string
    bukti_bayar: string
    status_bayar: $Enums.StatusBayar
    feedback: string
  }

  export type IuranCreateOrConnectWithoutUserInput = {
    where: IuranWhereUniqueInput
    create: XOR<IuranCreateWithoutUserInput, IuranUncheckedCreateWithoutUserInput>
  }

  export type IuranCreateManyUserInputEnvelope = {
    data: IuranCreateManyUserInput | IuranCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BroadcastCreateWithoutUserInput = {
    broadcast: string
    tanggal_acara: Date | string
    status_broadcast?: $Enums.StatusBroadcast
    feedback: string
    createdAt?: Date | string
  }

  export type BroadcastUncheckedCreateWithoutUserInput = {
    id?: number
    broadcast: string
    tanggal_acara: Date | string
    status_broadcast?: $Enums.StatusBroadcast
    feedback: string
    createdAt?: Date | string
  }

  export type BroadcastCreateOrConnectWithoutUserInput = {
    where: BroadcastWhereUniqueInput
    create: XOR<BroadcastCreateWithoutUserInput, BroadcastUncheckedCreateWithoutUserInput>
  }

  export type BroadcastCreateManyUserInputEnvelope = {
    data: BroadcastCreateManyUserInput | BroadcastCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AnggotaCreateWithoutUserInput = {
    nama: string
    nik: number
    gender: $Enums.Gender
    tempat_lahir: string
    tanggal_lahir: Date | string
    ktp: string
  }

  export type AnggotaUncheckedCreateWithoutUserInput = {
    id?: number
    nama: string
    nik: number
    gender: $Enums.Gender
    tempat_lahir: string
    tanggal_lahir: Date | string
    ktp: string
  }

  export type AnggotaCreateOrConnectWithoutUserInput = {
    where: AnggotaWhereUniqueInput
    create: XOR<AnggotaCreateWithoutUserInput, AnggotaUncheckedCreateWithoutUserInput>
  }

  export type AnggotaCreateManyUserInputEnvelope = {
    data: AnggotaCreateManyUserInput | AnggotaCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type KendalaCreateWithoutUserInput = {
    kendala: string
    kategori: $Enums.Kategori
    status_kendala: $Enums.StatusKendala
    feedback: string
    created_at?: Date | string
    updatedAt?: Date | string
  }

  export type KendalaUncheckedCreateWithoutUserInput = {
    id?: number
    kendala: string
    kategori: $Enums.Kategori
    status_kendala: $Enums.StatusKendala
    feedback: string
    created_at?: Date | string
    updatedAt?: Date | string
  }

  export type KendalaCreateOrConnectWithoutUserInput = {
    where: KendalaWhereUniqueInput
    create: XOR<KendalaCreateWithoutUserInput, KendalaUncheckedCreateWithoutUserInput>
  }

  export type KendalaCreateManyUserInputEnvelope = {
    data: KendalaCreateManyUserInput | KendalaCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type IuranUpsertWithWhereUniqueWithoutUserInput = {
    where: IuranWhereUniqueInput
    update: XOR<IuranUpdateWithoutUserInput, IuranUncheckedUpdateWithoutUserInput>
    create: XOR<IuranCreateWithoutUserInput, IuranUncheckedCreateWithoutUserInput>
  }

  export type IuranUpdateWithWhereUniqueWithoutUserInput = {
    where: IuranWhereUniqueInput
    data: XOR<IuranUpdateWithoutUserInput, IuranUncheckedUpdateWithoutUserInput>
  }

  export type IuranUpdateManyWithWhereWithoutUserInput = {
    where: IuranScalarWhereInput
    data: XOR<IuranUpdateManyMutationInput, IuranUncheckedUpdateManyWithoutUserInput>
  }

  export type IuranScalarWhereInput = {
    AND?: IuranScalarWhereInput | IuranScalarWhereInput[]
    OR?: IuranScalarWhereInput[]
    NOT?: IuranScalarWhereInput | IuranScalarWhereInput[]
    id?: IntFilter<"Iuran"> | number
    userId?: IntFilter<"Iuran"> | number
    tanggal_iuran?: DateTimeFilter<"Iuran"> | Date | string
    tanggal_jatuh_tempo?: DateTimeFilter<"Iuran"> | Date | string
    createdAt?: DateTimeFilter<"Iuran"> | Date | string
    bukti_bayar?: StringFilter<"Iuran"> | string
    status_bayar?: EnumStatusBayarFilter<"Iuran"> | $Enums.StatusBayar
    feedback?: StringFilter<"Iuran"> | string
  }

  export type BroadcastUpsertWithWhereUniqueWithoutUserInput = {
    where: BroadcastWhereUniqueInput
    update: XOR<BroadcastUpdateWithoutUserInput, BroadcastUncheckedUpdateWithoutUserInput>
    create: XOR<BroadcastCreateWithoutUserInput, BroadcastUncheckedCreateWithoutUserInput>
  }

  export type BroadcastUpdateWithWhereUniqueWithoutUserInput = {
    where: BroadcastWhereUniqueInput
    data: XOR<BroadcastUpdateWithoutUserInput, BroadcastUncheckedUpdateWithoutUserInput>
  }

  export type BroadcastUpdateManyWithWhereWithoutUserInput = {
    where: BroadcastScalarWhereInput
    data: XOR<BroadcastUpdateManyMutationInput, BroadcastUncheckedUpdateManyWithoutUserInput>
  }

  export type BroadcastScalarWhereInput = {
    AND?: BroadcastScalarWhereInput | BroadcastScalarWhereInput[]
    OR?: BroadcastScalarWhereInput[]
    NOT?: BroadcastScalarWhereInput | BroadcastScalarWhereInput[]
    id?: IntFilter<"Broadcast"> | number
    userId?: IntFilter<"Broadcast"> | number
    broadcast?: StringFilter<"Broadcast"> | string
    tanggal_acara?: DateTimeFilter<"Broadcast"> | Date | string
    status_broadcast?: EnumStatusBroadcastFilter<"Broadcast"> | $Enums.StatusBroadcast
    feedback?: StringFilter<"Broadcast"> | string
    createdAt?: DateTimeFilter<"Broadcast"> | Date | string
  }

  export type AnggotaUpsertWithWhereUniqueWithoutUserInput = {
    where: AnggotaWhereUniqueInput
    update: XOR<AnggotaUpdateWithoutUserInput, AnggotaUncheckedUpdateWithoutUserInput>
    create: XOR<AnggotaCreateWithoutUserInput, AnggotaUncheckedCreateWithoutUserInput>
  }

  export type AnggotaUpdateWithWhereUniqueWithoutUserInput = {
    where: AnggotaWhereUniqueInput
    data: XOR<AnggotaUpdateWithoutUserInput, AnggotaUncheckedUpdateWithoutUserInput>
  }

  export type AnggotaUpdateManyWithWhereWithoutUserInput = {
    where: AnggotaScalarWhereInput
    data: XOR<AnggotaUpdateManyMutationInput, AnggotaUncheckedUpdateManyWithoutUserInput>
  }

  export type AnggotaScalarWhereInput = {
    AND?: AnggotaScalarWhereInput | AnggotaScalarWhereInput[]
    OR?: AnggotaScalarWhereInput[]
    NOT?: AnggotaScalarWhereInput | AnggotaScalarWhereInput[]
    id?: IntFilter<"Anggota"> | number
    userId?: IntFilter<"Anggota"> | number
    nama?: StringFilter<"Anggota"> | string
    nik?: IntFilter<"Anggota"> | number
    gender?: EnumGenderFilter<"Anggota"> | $Enums.Gender
    tempat_lahir?: StringFilter<"Anggota"> | string
    tanggal_lahir?: DateTimeFilter<"Anggota"> | Date | string
    ktp?: StringFilter<"Anggota"> | string
  }

  export type KendalaUpsertWithWhereUniqueWithoutUserInput = {
    where: KendalaWhereUniqueInput
    update: XOR<KendalaUpdateWithoutUserInput, KendalaUncheckedUpdateWithoutUserInput>
    create: XOR<KendalaCreateWithoutUserInput, KendalaUncheckedCreateWithoutUserInput>
  }

  export type KendalaUpdateWithWhereUniqueWithoutUserInput = {
    where: KendalaWhereUniqueInput
    data: XOR<KendalaUpdateWithoutUserInput, KendalaUncheckedUpdateWithoutUserInput>
  }

  export type KendalaUpdateManyWithWhereWithoutUserInput = {
    where: KendalaScalarWhereInput
    data: XOR<KendalaUpdateManyMutationInput, KendalaUncheckedUpdateManyWithoutUserInput>
  }

  export type KendalaScalarWhereInput = {
    AND?: KendalaScalarWhereInput | KendalaScalarWhereInput[]
    OR?: KendalaScalarWhereInput[]
    NOT?: KendalaScalarWhereInput | KendalaScalarWhereInput[]
    id?: IntFilter<"Kendala"> | number
    userId?: IntFilter<"Kendala"> | number
    kendala?: StringFilter<"Kendala"> | string
    kategori?: EnumKategoriFilter<"Kendala"> | $Enums.Kategori
    status_kendala?: EnumStatusKendalaFilter<"Kendala"> | $Enums.StatusKendala
    feedback?: StringFilter<"Kendala"> | string
    created_at?: DateTimeFilter<"Kendala"> | Date | string
    updatedAt?: DateTimeFilter<"Kendala"> | Date | string
  }

  export type UserCreateWithoutIuranInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username?: string | null
    password: string
    role?: $Enums.Role
    blok_rumah: string
    tipe_rumah: $Enums.TipeRumah
    isVerified: boolean
    feedback: string
    broadcast?: BroadcastCreateNestedManyWithoutUserInput
    anggota?: AnggotaCreateNestedManyWithoutUserInput
    kendala?: KendalaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutIuranInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username?: string | null
    password: string
    role?: $Enums.Role
    blok_rumah: string
    tipe_rumah: $Enums.TipeRumah
    isVerified: boolean
    feedback: string
    broadcast?: BroadcastUncheckedCreateNestedManyWithoutUserInput
    anggota?: AnggotaUncheckedCreateNestedManyWithoutUserInput
    kendala?: KendalaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutIuranInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutIuranInput, UserUncheckedCreateWithoutIuranInput>
  }

  export type UserUpsertWithoutIuranInput = {
    update: XOR<UserUpdateWithoutIuranInput, UserUncheckedUpdateWithoutIuranInput>
    create: XOR<UserCreateWithoutIuranInput, UserUncheckedCreateWithoutIuranInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutIuranInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutIuranInput, UserUncheckedUpdateWithoutIuranInput>
  }

  export type UserUpdateWithoutIuranInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    blok_rumah?: StringFieldUpdateOperationsInput | string
    tipe_rumah?: EnumTipeRumahFieldUpdateOperationsInput | $Enums.TipeRumah
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    feedback?: StringFieldUpdateOperationsInput | string
    broadcast?: BroadcastUpdateManyWithoutUserNestedInput
    anggota?: AnggotaUpdateManyWithoutUserNestedInput
    kendala?: KendalaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutIuranInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    blok_rumah?: StringFieldUpdateOperationsInput | string
    tipe_rumah?: EnumTipeRumahFieldUpdateOperationsInput | $Enums.TipeRumah
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    feedback?: StringFieldUpdateOperationsInput | string
    broadcast?: BroadcastUncheckedUpdateManyWithoutUserNestedInput
    anggota?: AnggotaUncheckedUpdateManyWithoutUserNestedInput
    kendala?: KendalaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBroadcastInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username?: string | null
    password: string
    role?: $Enums.Role
    blok_rumah: string
    tipe_rumah: $Enums.TipeRumah
    isVerified: boolean
    feedback: string
    iuran?: IuranCreateNestedManyWithoutUserInput
    anggota?: AnggotaCreateNestedManyWithoutUserInput
    kendala?: KendalaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBroadcastInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username?: string | null
    password: string
    role?: $Enums.Role
    blok_rumah: string
    tipe_rumah: $Enums.TipeRumah
    isVerified: boolean
    feedback: string
    iuran?: IuranUncheckedCreateNestedManyWithoutUserInput
    anggota?: AnggotaUncheckedCreateNestedManyWithoutUserInput
    kendala?: KendalaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBroadcastInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBroadcastInput, UserUncheckedCreateWithoutBroadcastInput>
  }

  export type UserUpsertWithoutBroadcastInput = {
    update: XOR<UserUpdateWithoutBroadcastInput, UserUncheckedUpdateWithoutBroadcastInput>
    create: XOR<UserCreateWithoutBroadcastInput, UserUncheckedCreateWithoutBroadcastInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBroadcastInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBroadcastInput, UserUncheckedUpdateWithoutBroadcastInput>
  }

  export type UserUpdateWithoutBroadcastInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    blok_rumah?: StringFieldUpdateOperationsInput | string
    tipe_rumah?: EnumTipeRumahFieldUpdateOperationsInput | $Enums.TipeRumah
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    feedback?: StringFieldUpdateOperationsInput | string
    iuran?: IuranUpdateManyWithoutUserNestedInput
    anggota?: AnggotaUpdateManyWithoutUserNestedInput
    kendala?: KendalaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBroadcastInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    blok_rumah?: StringFieldUpdateOperationsInput | string
    tipe_rumah?: EnumTipeRumahFieldUpdateOperationsInput | $Enums.TipeRumah
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    feedback?: StringFieldUpdateOperationsInput | string
    iuran?: IuranUncheckedUpdateManyWithoutUserNestedInput
    anggota?: AnggotaUncheckedUpdateManyWithoutUserNestedInput
    kendala?: KendalaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAnggotaInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username?: string | null
    password: string
    role?: $Enums.Role
    blok_rumah: string
    tipe_rumah: $Enums.TipeRumah
    isVerified: boolean
    feedback: string
    iuran?: IuranCreateNestedManyWithoutUserInput
    broadcast?: BroadcastCreateNestedManyWithoutUserInput
    kendala?: KendalaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnggotaInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username?: string | null
    password: string
    role?: $Enums.Role
    blok_rumah: string
    tipe_rumah: $Enums.TipeRumah
    isVerified: boolean
    feedback: string
    iuran?: IuranUncheckedCreateNestedManyWithoutUserInput
    broadcast?: BroadcastUncheckedCreateNestedManyWithoutUserInput
    kendala?: KendalaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnggotaInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnggotaInput, UserUncheckedCreateWithoutAnggotaInput>
  }

  export type UserUpsertWithoutAnggotaInput = {
    update: XOR<UserUpdateWithoutAnggotaInput, UserUncheckedUpdateWithoutAnggotaInput>
    create: XOR<UserCreateWithoutAnggotaInput, UserUncheckedCreateWithoutAnggotaInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnggotaInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnggotaInput, UserUncheckedUpdateWithoutAnggotaInput>
  }

  export type UserUpdateWithoutAnggotaInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    blok_rumah?: StringFieldUpdateOperationsInput | string
    tipe_rumah?: EnumTipeRumahFieldUpdateOperationsInput | $Enums.TipeRumah
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    feedback?: StringFieldUpdateOperationsInput | string
    iuran?: IuranUpdateManyWithoutUserNestedInput
    broadcast?: BroadcastUpdateManyWithoutUserNestedInput
    kendala?: KendalaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnggotaInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    blok_rumah?: StringFieldUpdateOperationsInput | string
    tipe_rumah?: EnumTipeRumahFieldUpdateOperationsInput | $Enums.TipeRumah
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    feedback?: StringFieldUpdateOperationsInput | string
    iuran?: IuranUncheckedUpdateManyWithoutUserNestedInput
    broadcast?: BroadcastUncheckedUpdateManyWithoutUserNestedInput
    kendala?: KendalaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutKendalaInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username?: string | null
    password: string
    role?: $Enums.Role
    blok_rumah: string
    tipe_rumah: $Enums.TipeRumah
    isVerified: boolean
    feedback: string
    iuran?: IuranCreateNestedManyWithoutUserInput
    broadcast?: BroadcastCreateNestedManyWithoutUserInput
    anggota?: AnggotaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutKendalaInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username?: string | null
    password: string
    role?: $Enums.Role
    blok_rumah: string
    tipe_rumah: $Enums.TipeRumah
    isVerified: boolean
    feedback: string
    iuran?: IuranUncheckedCreateNestedManyWithoutUserInput
    broadcast?: BroadcastUncheckedCreateNestedManyWithoutUserInput
    anggota?: AnggotaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutKendalaInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKendalaInput, UserUncheckedCreateWithoutKendalaInput>
  }

  export type UserUpsertWithoutKendalaInput = {
    update: XOR<UserUpdateWithoutKendalaInput, UserUncheckedUpdateWithoutKendalaInput>
    create: XOR<UserCreateWithoutKendalaInput, UserUncheckedCreateWithoutKendalaInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutKendalaInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutKendalaInput, UserUncheckedUpdateWithoutKendalaInput>
  }

  export type UserUpdateWithoutKendalaInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    blok_rumah?: StringFieldUpdateOperationsInput | string
    tipe_rumah?: EnumTipeRumahFieldUpdateOperationsInput | $Enums.TipeRumah
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    feedback?: StringFieldUpdateOperationsInput | string
    iuran?: IuranUpdateManyWithoutUserNestedInput
    broadcast?: BroadcastUpdateManyWithoutUserNestedInput
    anggota?: AnggotaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutKendalaInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    blok_rumah?: StringFieldUpdateOperationsInput | string
    tipe_rumah?: EnumTipeRumahFieldUpdateOperationsInput | $Enums.TipeRumah
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    feedback?: StringFieldUpdateOperationsInput | string
    iuran?: IuranUncheckedUpdateManyWithoutUserNestedInput
    broadcast?: BroadcastUncheckedUpdateManyWithoutUserNestedInput
    anggota?: AnggotaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type IuranCreateManyUserInput = {
    id?: number
    tanggal_iuran: Date | string
    tanggal_jatuh_tempo: Date | string
    createdAt?: Date | string
    bukti_bayar: string
    status_bayar: $Enums.StatusBayar
    feedback: string
  }

  export type BroadcastCreateManyUserInput = {
    id?: number
    broadcast: string
    tanggal_acara: Date | string
    status_broadcast?: $Enums.StatusBroadcast
    feedback: string
    createdAt?: Date | string
  }

  export type AnggotaCreateManyUserInput = {
    id?: number
    nama: string
    nik: number
    gender: $Enums.Gender
    tempat_lahir: string
    tanggal_lahir: Date | string
    ktp: string
  }

  export type KendalaCreateManyUserInput = {
    id?: number
    kendala: string
    kategori: $Enums.Kategori
    status_kendala: $Enums.StatusKendala
    feedback: string
    created_at?: Date | string
    updatedAt?: Date | string
  }

  export type IuranUpdateWithoutUserInput = {
    tanggal_iuran?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_jatuh_tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bukti_bayar?: StringFieldUpdateOperationsInput | string
    status_bayar?: EnumStatusBayarFieldUpdateOperationsInput | $Enums.StatusBayar
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type IuranUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal_iuran?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_jatuh_tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bukti_bayar?: StringFieldUpdateOperationsInput | string
    status_bayar?: EnumStatusBayarFieldUpdateOperationsInput | $Enums.StatusBayar
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type IuranUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal_iuran?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_jatuh_tempo?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bukti_bayar?: StringFieldUpdateOperationsInput | string
    status_bayar?: EnumStatusBayarFieldUpdateOperationsInput | $Enums.StatusBayar
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type BroadcastUpdateWithoutUserInput = {
    broadcast?: StringFieldUpdateOperationsInput | string
    tanggal_acara?: DateTimeFieldUpdateOperationsInput | Date | string
    status_broadcast?: EnumStatusBroadcastFieldUpdateOperationsInput | $Enums.StatusBroadcast
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BroadcastUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    broadcast?: StringFieldUpdateOperationsInput | string
    tanggal_acara?: DateTimeFieldUpdateOperationsInput | Date | string
    status_broadcast?: EnumStatusBroadcastFieldUpdateOperationsInput | $Enums.StatusBroadcast
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BroadcastUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    broadcast?: StringFieldUpdateOperationsInput | string
    tanggal_acara?: DateTimeFieldUpdateOperationsInput | Date | string
    status_broadcast?: EnumStatusBroadcastFieldUpdateOperationsInput | $Enums.StatusBroadcast
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnggotaUpdateWithoutUserInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nik?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    tempat_lahir?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    ktp?: StringFieldUpdateOperationsInput | string
  }

  export type AnggotaUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nik?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    tempat_lahir?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    ktp?: StringFieldUpdateOperationsInput | string
  }

  export type AnggotaUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nik?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    tempat_lahir?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    ktp?: StringFieldUpdateOperationsInput | string
  }

  export type KendalaUpdateWithoutUserInput = {
    kendala?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriFieldUpdateOperationsInput | $Enums.Kategori
    status_kendala?: EnumStatusKendalaFieldUpdateOperationsInput | $Enums.StatusKendala
    feedback?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KendalaUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    kendala?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriFieldUpdateOperationsInput | $Enums.Kategori
    status_kendala?: EnumStatusKendalaFieldUpdateOperationsInput | $Enums.StatusKendala
    feedback?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KendalaUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    kendala?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriFieldUpdateOperationsInput | $Enums.Kategori
    status_kendala?: EnumStatusKendalaFieldUpdateOperationsInput | $Enums.StatusKendala
    feedback?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}