generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String      @id @default(uuid()) @db.Uuid
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  email       String      @unique
  username    String?
  password    String
  phone       String?
  role        Role        @default(penghuni)
  isVerified  Boolean?
  feedback    String?
  cluster     Cluster?
  nomor_rumah String?
  rt          String?
  rw          String?
  anggota     Anggota[]
  broadcast   Broadcast[]
  panic       Panic[]
  Pengaduan   Pengaduan[]
  surat       Surat[]
  tagihan     Tagihan[]
}

model Tagihan {
  id           String      @id @default(uuid()) @db.Uuid
  userId       String      @db.Uuid
  metode_bayar MetodeBayar @default(otomatis)
  bulan        Int
  tahun        Int
  nominal      Int
  createdAt    DateTime    @default(now())
  status_bayar StatusBayar @default(belumLunas)
  user         User        @relation(fields: [userId], references: [id])
  transaksi    Transaksi[]
}

model Transaksi {
  id                String    @id @default(uuid())
  orderId           String    @db.Uuid
  userId            String
  grossAmount       Decimal
  currency          String
  paymentType       String
  transactionStatus String
  fraudStatus       String
  vaBank            String?
  vaNumber          String?
  transactionTime   DateTime?
  settlementTime    DateTime?
  expiryTime        DateTime?
  order             Tagihan   @relation(fields: [orderId], references: [id])
}

model Broadcast {
  id               String          @id @default(uuid()) @db.Uuid
  userId           String          @db.Uuid
  broadcast        String
  tanggal_acara    DateTime
  status_broadcast StatusBroadcast @default(uploaded)
  feedback         String?
  createdAt        DateTime        @default(now())
  user             User            @relation(fields: [userId], references: [id])
}

model Anggota {
  id                String           @id @default(uuid()) @db.Uuid
  userId            String           @db.Uuid
  nama              String
  nik               Int
  gender            Gender
  tempat_lahir      String
  tanggal_lahir     DateTime
  agama             String
  status_perkawinan StatusPerkawinan
  pekerjaan         String
  warga_negara      String
  ktp               String
  user              User             @relation(fields: [userId], references: [id])
  surat             Surat[]
}

model Pengaduan {
  id               String          @id @default(uuid()) @db.Uuid
  userId           String          @db.Uuid
  pengaduan        String
  kategori         Kategori
  status_pengaduan StatusPengaduan @default(PengajuanBaru)
  feedback         String?
  created_at       DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  user             User            @relation(fields: [userId], references: [id])
}

model Peraturan {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Panic {
  id         String   @id @default(uuid())
  userId     String   @db.Uuid
  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Surat {
  id        String      @id @default(uuid()) @db.Uuid
  userId    String      @db.Uuid
  anggotaId String      @db.Uuid
  deskripsi String?
  createdAt DateTime    @default(now())
  status    StatusSurat @default(requested)
  feedback  String?
  anggota   Anggota     @relation(fields: [anggotaId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}

enum Role {
  penghuni
  admin
}

enum Cluster {
  ChairaTownHouse
  GrandCeleste
  Calosa
}

enum StatusBayar {
  belumLunas
  lunas
}

enum MetodeBayar {
  manual
  otomatis
}

enum StatusBroadcast {
  uploaded
  verifying
  approved
}

enum StatusPerkawinan {
  BelumMenikah
  Menikah
}

enum Gender {
  Pria
  Wanita
}

enum Kategori {
  Keamanan
  Infrastruktur
  Kebersihan
  Pelayanan
  Lainnya
}

enum StatusPengaduan {
  PengajuanBaru
  Ditangani
  Selesai
}

enum StatusSurat {
  requested
  approved
  rejected
}
