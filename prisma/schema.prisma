datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
}

// User Data
model User {
    id         String      @id @default(uuid()) @db.Uuid
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    email      String      @unique
    username   String?
    password   String
    phone      String?
    role       Role        @default(penghuni)
    blok_rumah String?
    tipe_rumah TipeRumah?
    isVerified Boolean?
    feedback   String?
    iuran      Iuran[]
    transaksi  Transaksi[]
    broadcast  Broadcast[]
    anggota    Anggota[]
    Pengaduan  Pengaduan[]
    panic      Panic[]
}

enum Role {
    penghuni
    admin
}

enum TipeRumah {
    ChairaTownHouse
    GrandCeleste
    Calosa
}

// Data Iuran
model Iuran {
    id           String      @id @default(uuid()) @db.Uuid
    user         User        @relation(fields: [userId], references: [id])
    userId       String      @db.Uuid
    bulan        Int
    tahun        Int
    nominal      Int
    createdAt    DateTime    @default(now())
    status_bayar StatusBayar @default(verifikasi)
}

model Transaksi {
    id              String   @id @default(uuid()) @db.Uuid
    user            User     @relation(fields: [userId], references: [id])
    userId          String   @db.Uuid
    midtransOrderId String   @unique
    totalNominal    Int
    status          String
    paidMonth       Int
    paidYear        Int
    createdAt       DateTime @default(now())
}

enum StatusBayar {
    verifikasi
    lunas
}

// BroadCast Data
model Broadcast {
    id               String          @id @default(uuid()) @db.Uuid
    user             User            @relation(fields: [userId], references: [id])
    userId           String          @db.Uuid
    broadcast        String
    tanggal_acara    DateTime
    status_broadcast StatusBroadcast @default(uploaded)
    feedback         String?
    createdAt        DateTime        @default(now())
}

enum StatusBroadcast {
    uploaded
    verifying
    approved
}

// Data Anggota Keluarga
model Anggota {
    id            String   @id @default(uuid()) @db.Uuid
    user          User     @relation(fields: [userId], references: [id])
    userId        String   @db.Uuid
    nama          String
    nik           Int
    gender        Gender
    tempat_lahir  String
    tanggal_lahir DateTime
    ktp           String
}

enum Gender {
    Pria
    Wanita
}

// Pengaduan
model Pengaduan {
    id               String          @id @default(uuid()) @db.Uuid
    user             User            @relation(fields: [userId], references: [id])
    userId           String          @db.Uuid
    pengaduan        String
    kategori         Kategori
    status_pengaduan StatusPengaduan @default(PengajuanBaru)
    feedback         String?
    created_at       DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
}

enum Kategori {
    Keamanan
    Infrastruktur
    Kebersihan
    Pelayanan
    Lainnya
}

enum StatusPengaduan {
    PengajuanBaru
    Ditangani
    Selesai
}

// Peraturan
model Peraturan {
    id        Int      @id @default(autoincrement())
    title     String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Panic
model Panic {
    id         String   @id @default(uuid())
    user       User     @relation(fields: [userId], references: [id])
    userId     String   @db.Uuid
    created_at DateTime @default(now())
    updatedAt  DateTime @updatedAt
}
