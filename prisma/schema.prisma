generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String            @id @default(uuid()) @db.Uuid
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  email           String            @unique
  username        String?
  password        String
  phone           String?
  role            Role              @default(penghuni)
  isVerified      Boolean?
  feedback        String?
  cluster         String?
  nomor_rumah     String?
  rt              String?
  rw              String?
  isActive        Boolean           @default(true)
  deletedAt       DateTime?
  penghuni        Penghuni[]
  broadcast       Broadcast[]
  emergency       Emergency[]
  Pengaduan       Pengaduan[]
  surat           Surat[]
  tagihan         Tagihan[]
  notifikasi      Notifikasi[]
  fcmToken        Fcmtoken[]
  guestPermission GuestPermission[]
  guestHistory    GuestHistory[]
  clusterId       Int?
  clusterRef      Cluster?          @relation(fields: [clusterId], references: [id])
}

model Tagihan {
  id             String      @id @default(uuid()) @db.Uuid
  userId         String      @db.Uuid
  metode_bayar   MetodeBayar @default(otomatis)
  bulan          Int
  tahun          Int
  nominal        Int
  snap_token     String?
  createdAt      DateTime    @default(now())
  status_bayar   StatusBayar @default(belumLunas)
  user           User        @relation(fields: [userId], references: [id])
  transaksi      Transaksi[]
  lastReminderAt DateTime?
  reminderCount  Int         @default(0)
}

model Fcmtoken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Transaksi {
  id                String    @id @default(uuid())
  orderId           String    @db.Uuid
  userId            String
  grossAmount       Decimal
  currency          String
  paymentType       String
  transactionStatus String
  fraudStatus       String
  vaBank            String?
  vaNumber          String?
  transactionTime   DateTime?
  settlementTime    DateTime?
  expiryTime        DateTime?
  order             Tagihan   @relation(fields: [orderId], references: [id])
}

model Broadcast {
  id               String             @id @default(uuid()) @db.Uuid
  userId           String             @db.Uuid
  kategori         Kategori_Broadcast
  broadcast        String
  tanggal_acara    DateTime?
  foto             String?
  status_broadcast StatusBroadcast    @default(verifying)
  feedback         String?
  createdAt        DateTime           @default(now())
  user             User               @relation(fields: [userId], references: [id])
}

model Penghuni {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  nama   String
  nik    String
  gender String
  user   User   @relation(fields: [userId], references: [id])
}

model Pengaduan {
  id               String             @id @default(uuid()) @db.Uuid
  userId           String             @db.Uuid
  pengaduan        String
  kategori         Kategori_Pengaduan
  status_pengaduan StatusPengaduan    @default(PengajuanBaru)
  feedback         String?
  foto             String?
  created_at       DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id])
}

model Peraturan {
  id            Int                @id @default(autoincrement())
  judul         String
  isi_peraturan String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  kategori      Kategori_Peraturan
}

model Cluster {
  id              Int      @id @default(autoincrement())
  nama_cluster    String   @unique
  nominal_tagihan Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  users           User[]
}

model Emergency {
  id              String   @id @default(uuid())
  userId          String   @db.Uuid
  latitude        Float    @db.DoublePrecision
  longitude       Float    @db.DoublePrecision
  kategori        String?
  detail_kejadian String?
  status          String?  @default("pending")  
  created_at      DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
}

model Notifikasi {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  judul     String
  isi       String
  tipe      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Surat {
  id             String      @id @default(uuid()) @db.Uuid
  userId         String      @db.Uuid
  deskripsi      String?
  fasilitas      String?
  keperluan      String
  tanggalMulai   DateTime
  tanggalSelesai DateTime
  createdAt      DateTime    @default(now())
  file           String?
  status         StatusSurat @default(requested)
  feedback       String?
  user           User        @relation(fields: [userId], references: [id])
}

model GuestPermission {
  id             String     @id @default(uuid()) @db.Uuid
  userId         String     @db.Uuid
  guestName      String
  startVisitDate DateTime
  endVisitDate   DateTime
  qrUrl          String?
  status         StatusTamu @default(scheduled)
  createdAt      DateTime   @default(now())
  user           User       @relation(fields: [userId], references: [id])
}

model GuestHistory {
  id             String     @id @default(uuid()) @db.Uuid
  userId         String     @db.Uuid
  guestName      String
  startVisitDate DateTime
  endVisitDate   DateTime
  createdAt      DateTime   @default(now())
  user           User       @relation(fields: [userId], references: [id])
}

enum StatusTamu {
  scheduled
  arrived
}

enum Role {
  penghuni
  admin
}

enum StatusBayar {
  belumLunas
  lunas
}

enum MetodeBayar {
  manual
  otomatis
}

enum StatusBroadcast {
  uploaded
  verifying
  approved
  rejected
}

enum StatusPerkawinan {
  BelumMenikah
  Menikah
}

enum Kategori_Pengaduan {
  Keamanan
  Infrastruktur
  Kebersihan
  Pelayanan
  Lainnya
}

enum Kategori_Peraturan {
  Keamanan
  Infrastruktur
  Kebersihan
  Pelayanan
  Lainnya
}

enum Kategori_Broadcast {
  Keamanan
  Infrastruktur
  Kebersihan
  Pelayanan
  Kehilangan
  Kegiatan
  Promosi
  Lainnya
}

enum StatusPengaduan {
  PengajuanBaru
  Ditangani
  Selesai
}

enum StatusSurat {
  requested
  approved
  rejected
}
